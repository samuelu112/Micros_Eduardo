
Laboratorio_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000250  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  000002f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079b  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000686  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032e  00000000  00000000  000011cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019f  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  9e:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
volatile uint8_t contador = 0;
volatile uint8_t botones;
volatile uint8_t current_display = 0;

void initADC() {
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX1);  // ADC2 (PC2), 8-bit
  a6:	82 e6       	ldi	r24, 0x62	; 98
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ac:	8f ee       	ldi	r24, 0xEF	; 239
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1 << ADC2D);
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  b8:	08 95       	ret

000000ba <__vector_21>:
}

ISR(ADC_vect) {
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	//uint8_t adc_value = ADCH;  // Leer valor ADC de 8 bits
	display_digit[0] = seg7_table[(ADCH >> 4) & 0x0F];  // Nibble alto
  d2:	c9 e7       	ldi	r28, 0x79	; 121
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	e8 81       	ld	r30, Y
  d8:	e2 95       	swap	r30
  da:	ef 70       	andi	r30, 0x0F	; 15
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	80 81       	ld	r24, Z
  e4:	a2 e1       	ldi	r26, 0x12	; 18
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	8c 93       	st	X, r24
	display_digit[1] = seg7_table[ADCH & 0x0F];         // Nibble bajo
  ea:	e8 81       	ld	r30, Y
  ec:	ef 70       	andi	r30, 0x0F	; 15
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	e0 50       	subi	r30, 0x00	; 0
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	80 81       	ld	r24, Z
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	8c 93       	st	X, r24
}
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_9>:

ISR(TIMER2_OVF_vect) {
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	TCNT2 = 131;  // Recarga para 1ms @16MHz con prescaler 64
 11e:	83 e8       	ldi	r24, 0x83	; 131
 120:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	PORTB &= ~0x03;  // Apagar ambos displays
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8c 7f       	andi	r24, 0xFC	; 252
 128:	85 b9       	out	0x05, r24	; 5
	
	if(current_display == 0) {
 12a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 12e:	81 11       	cpse	r24, r1
 130:	0a c0       	rjmp	.+20     	; 0x146 <__vector_9+0x34>
		PORTD = display_digit[0];  // Mostrar dígito alto
 132:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <display_digit>
 136:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB0);
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	85 b9       	out	0x05, r24	; 5
		current_display = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 144:	08 c0       	rjmp	.+16     	; 0x156 <__vector_9+0x44>
		} else {
		PORTD = display_digit[1];  // Mostrar dígito bajo
 146:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <display_digit+0x1>
 14a:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB1);
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	85 b9       	out	0x05, r24	; 5
		current_display = 0;
 152:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
}
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_4>:

ISR(PCINT1_vect) {
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	botones = PINC & ((1 << PC0) | (1 << PC1));
 172:	86 b1       	in	r24, 0x06	; 6
 174:	83 70       	andi	r24, 0x03	; 3
 176:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <botones>
	TCNT0 = 138;
 17a:	8a e8       	ldi	r24, 0x8A	; 138
 17c:	86 bd       	out	0x26, r24	; 38
	TCCR0B = (1 << CS02) | (1 << CS00);
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	85 bd       	out	0x25, r24	; 37
	PCICR &= ~(1 << PCIE1);
 182:	e8 e6       	ldi	r30, 0x68	; 104
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	80 83       	st	Z, r24
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_16>:

ISR(TIMER0_OVF_vect) {
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	TCCR0B = 0;
 1b0:	15 bc       	out	0x25, r1	; 37
	uint8_t estadoa = PINC & ((1 << PC0) | (1 << PC1));
 1b2:	86 b1       	in	r24, 0x06	; 6
 1b4:	28 2f       	mov	r18, r24
 1b6:	23 70       	andi	r18, 0x03	; 3
	
	if (estadoa == botones) {
 1b8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <botones>
 1bc:	29 13       	cpse	r18, r25
 1be:	0e c0       	rjmp	.+28     	; 0x1dc <__vector_16+0x40>
		if ((estadoa & (1 << PC0))) contador++;
 1c0:	80 ff       	sbrs	r24, 0
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <__vector_16+0x32>
 1c4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <contador>
 1c8:	9f 5f       	subi	r25, 0xFF	; 255
 1ca:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <contador>
		if ((estadoa & (1 << PC1))) contador--;
 1ce:	81 ff       	sbrs	r24, 1
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <__vector_16+0x40>
 1d2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <contador>
 1d6:	81 50       	subi	r24, 0x01	; 1
 1d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <contador>
		}
	PCICR |= (1 << PCIE1);
 1dc:	e8 e6       	ldi	r30, 0x68	; 104
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <main>:

int main(void) {
	DDRD = 0xFF;    // Salida para segmentos
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0x03;   // PB0 y PB1 como salidas
 1fe:	84 b1       	in	r24, 0x04	; 4
 200:	83 60       	ori	r24, 0x03	; 3
 202:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~0x03;  // PC0 y PC1 como entradas
 204:	87 b1       	in	r24, 0x07	; 7
 206:	8c 7f       	andi	r24, 0xFC	; 252
 208:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x03;  // Pull-ups en PC0 y PC1
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	83 60       	ori	r24, 0x03	; 3
 20e:	88 b9       	out	0x08, r24	; 8

	// Configurar Timer2 para multiplexado
	TCCR2A = 0;
 210:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);  // Prescaler 64
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = (1 << TOIE2);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCNT2 = 131;
 220:	83 e8       	ldi	r24, 0x83	; 131
 222:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

	// Configurar interrupciones
	PCICR |= (1 << PCIE1);
 226:	e8 e6       	ldi	r30, 0x68	; 104
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PC0) | (1 << PC1);
 230:	ec e6       	ldi	r30, 0x6C	; 108
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	83 60       	ori	r24, 0x03	; 3
 238:	80 83       	st	Z, r24
	TIMSK0 |= (1 << TOIE0);
 23a:	ee e6       	ldi	r30, 0x6E	; 110
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	81 60       	ori	r24, 0x01	; 1
 242:	80 83       	st	Z, r24
	
	initADC();
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	sei();
 248:	78 94       	sei
 24a:	ff cf       	rjmp	.-2      	; 0x24a <main+0x50>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
