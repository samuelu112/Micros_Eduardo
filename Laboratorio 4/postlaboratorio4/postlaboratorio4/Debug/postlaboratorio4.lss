
postlaboratorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800110  00800110  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bf  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000686  00000000  00000000  00000bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000366  00000000  00000000  00001239  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000192  00000000  00000000  00001a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 21 01 	call	0x242	; 0x242 <main>
  9e:	0c 94 4a 01 	jmp	0x294	; 0x294 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
volatile uint8_t current_display = 0;
volatile uint8_t show_mode = 0;
volatile uint8_t adc_value = 0;

void initADC() {
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX1);
  a6:	82 e6       	ldi	r24, 0x62	; 98
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ac:	8f ee       	ldi	r24, 0xEF	; 239
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1 << ADC2D);
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  b8:	08 95       	ret

000000ba <__vector_21>:
}

ISR(ADC_vect) {
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	adc_value = ADCH;
  ce:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	display_digit[0] = seg7_table[(adc_value >> 4) & 0x0F];
  d6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
  da:	e2 95       	swap	r30
  dc:	ef 70       	andi	r30, 0x0F	; 15
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	e0 50       	subi	r30, 0x00	; 0
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	80 81       	ld	r24, Z
  e6:	a4 e1       	ldi	r26, 0x14	; 20
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	8c 93       	st	X, r24
	display_digit[1] = seg7_table[adc_value & 0x0F];
  ec:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
  f0:	ef 70       	andi	r30, 0x0F	; 15
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	11 96       	adiw	r26, 0x01	; 1
  fc:	8c 93       	st	X, r24
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_9>:

ISR(TIMER2_OVF_vect) {
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
	TCNT2 = 100; // Frecuencia de actualización
 120:	84 e6       	ldi	r24, 0x64	; 100
 122:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	// Apagar todos los elementos antes de cambiar
	PORTB &= ~0x0F;
 126:	85 b1       	in	r24, 0x05	; 5
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	85 b9       	out	0x05, r24	; 5
	PORTD = 0x00;
 12c:	1b b8       	out	0x0b, r1	; 11
	
	if (show_mode == 0) {
 12e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <show_mode>
 132:	81 11       	cpse	r24, r1
 134:	19 c0       	rjmp	.+50     	; 0x168 <__vector_9+0x56>
		// Mostrar displays 7 segmentos
		if (current_display == 0) {
 136:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <current_display>
 13a:	81 11       	cpse	r24, r1
 13c:	07 c0       	rjmp	.+14     	; 0x14c <__vector_9+0x3a>
			PORTD = display_digit[0];
 13e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <display_digit>
 142:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1 << PB0);
 144:	85 b1       	in	r24, 0x05	; 5
 146:	81 60       	ori	r24, 0x01	; 1
 148:	85 b9       	out	0x05, r24	; 5
 14a:	06 c0       	rjmp	.+12     	; 0x158 <__vector_9+0x46>
			} else {
			PORTD = display_digit[1];
 14c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <display_digit+0x1>
 150:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1 << PB1);
 152:	85 b1       	in	r24, 0x05	; 5
 154:	82 60       	ori	r24, 0x02	; 2
 156:	85 b9       	out	0x05, r24	; 5
		}
		current_display = !current_display;
 158:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <current_display>
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	91 11       	cpse	r25, r1
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <current_display>
 166:	06 c0       	rjmp	.+12     	; 0x174 <__vector_9+0x62>
		} else {
		// Mostrar contador en LEDs
		PORTD = contador;
 168:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 16c:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB2); // Activar transistor de LEDs
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	84 60       	ori	r24, 0x04	; 4
 172:	85 b9       	out	0x05, r24	; 5
	}
	
	// Control del LED de comparación
	if (adc_value > contador) PORTB |= (1 << PB3);
 174:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 178:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 17c:	89 17       	cp	r24, r25
 17e:	20 f4       	brcc	.+8      	; 0x188 <__vector_9+0x76>
 180:	85 b1       	in	r24, 0x05	; 5
 182:	88 60       	ori	r24, 0x08	; 8
 184:	85 b9       	out	0x05, r24	; 5
 186:	03 c0       	rjmp	.+6      	; 0x18e <__vector_9+0x7c>
	else PORTB &= ~(1 << PB3);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	85 b9       	out	0x05, r24	; 5
	
	show_mode = !show_mode; // Alternar
 18e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <show_mode>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	91 11       	cpse	r25, r1
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <show_mode>
}
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_4>:

ISR(PCINT1_vect) {
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	botones = PINC & 0x03;
 1ba:	86 b1       	in	r24, 0x06	; 6
 1bc:	83 70       	andi	r24, 0x03	; 3
 1be:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <botones>
	TCNT0 = 131;
 1c2:	83 e8       	ldi	r24, 0x83	; 131
 1c4:	86 bd       	out	0x26, r24	; 38
	TCCR0B = (1 << CS02) | (1 << CS00);
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	85 bd       	out	0x25, r24	; 37
	PCICR &= ~(1 << PCIE1);
 1ca:	e8 e6       	ldi	r30, 0x68	; 104
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8d 7f       	andi	r24, 0xFD	; 253
 1d2:	80 83       	st	Z, r24
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	TCCR0B = 0;
 1f8:	15 bc       	out	0x25, r1	; 37
	uint8_t estadoa = PINC & 0x03;
 1fa:	86 b1       	in	r24, 0x06	; 6
 1fc:	28 2f       	mov	r18, r24
 1fe:	23 70       	andi	r18, 0x03	; 3
	
	if (estadoa == botones) {
 200:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <botones>
 204:	29 13       	cpse	r18, r25
 206:	0e c0       	rjmp	.+28     	; 0x224 <__vector_16+0x40>
		if (!(estadoa & (1 << PC0))) contador++;
 208:	80 fd       	sbrc	r24, 0
 20a:	05 c0       	rjmp	.+10     	; 0x216 <__vector_16+0x32>
 20c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <contador>
 210:	9f 5f       	subi	r25, 0xFF	; 255
 212:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <contador>
		if (!(estadoa & (1 << PC1))) contador--;
 216:	81 fd       	sbrc	r24, 1
 218:	05 c0       	rjmp	.+10     	; 0x224 <__vector_16+0x40>
 21a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contador>
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contador>
	}
	PCICR |= (1 << PCIE1);
 224:	e8 e6       	ldi	r30, 0x68	; 104
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	80 83       	st	Z, r24
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <main>:

int main(void) {
	DDRD = 0xFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0x0F;
 246:	84 b1       	in	r24, 0x04	; 4
 248:	8f 60       	ori	r24, 0x0F	; 15
 24a:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~0x03;
 24c:	87 b1       	in	r24, 0x07	; 7
 24e:	8c 7f       	andi	r24, 0xFC	; 252
 250:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x03;
 252:	88 b1       	in	r24, 0x08	; 8
 254:	83 60       	ori	r24, 0x03	; 3
 256:	88 b9       	out	0x08, r24	; 8

	// Configuración Timer2
	TCCR2A = 0;
 258:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22); // Prescaler 64
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = (1 << TOIE2);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCNT2 = 100; // Overflow
 268:	84 e6       	ldi	r24, 0x64	; 100
 26a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

	PCICR |= (1 << PCIE1);
 26e:	e8 e6       	ldi	r30, 0x68	; 104
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	82 60       	ori	r24, 0x02	; 2
 276:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PC0) | (1 << PC1);
 278:	ec e6       	ldi	r30, 0x6C	; 108
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	83 60       	ori	r24, 0x03	; 3
 280:	80 83       	st	Z, r24
	TIMSK0 |= (1 << TOIE0);
 282:	ee e6       	ldi	r30, 0x6E	; 110
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	80 83       	st	Z, r24
	
	initADC();
 28c:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	sei();
 290:	78 94       	sei
 292:	ff cf       	rjmp	.-2      	; 0x292 <main+0x50>

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
