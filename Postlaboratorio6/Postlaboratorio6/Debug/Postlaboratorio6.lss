
Postlaboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  0000016a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800160  00800160  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000828  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006eb  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e0  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b3  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cd  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 36       	cpi	r26, 0x61	; 97
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9e:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUAT>:
	sei();
}

// Inicializar USART (9600 bauds, 8N1)
void initUAT(void) {
	UBRR0 = 103;
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
  b2:	88 e9       	ldi	r24, 0x98	; 152
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  be:	08 95       	ret

000000c0 <setup>:
	}
}

// Configuración inicial
void setup(void) {
	cli();
  c0:	f8 94       	cli
	DDRB = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 b9       	out	0x04, r24	; 4
	initUAT();
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <initUAT>
	sei();
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <__vector_18>:
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

// Interrupción de recepción serial
ISR(USART_RX_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
	comando = UDR0;  // Capturar comando del usuario
  da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  de:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
}
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <writeChar>:
}


// Funciones básicas de USART
void writeChar(char c) {
	while(!(UCSR0A & (1 << UDRE0)));
  ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f2:	95 ff       	sbrs	r25, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <writeChar>
	UDR0 = c;
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fa:	08 95       	ret

000000fc <writeString>:
}

void writeString(const char* s) {
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	8c 01       	movw	r16, r24
	for(uint8_t i=0; s[i]!='\0'; i++) writeChar(s[i]);
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	03 c0       	rjmp	.+6      	; 0x10e <writeString+0x12>
 108:	0e 94 77 00 	call	0xee	; 0xee <writeChar>
 10c:	cf 5f       	subi	r28, 0xFF	; 255
 10e:	f8 01       	movw	r30, r16
 110:	ec 0f       	add	r30, r28
 112:	f1 1d       	adc	r31, r1
 114:	80 81       	ld	r24, Z
 116:	81 11       	cpse	r24, r1
 118:	f7 cf       	rjmp	.-18     	; 0x108 <writeString+0xc>
}
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <mostrarMenu>:
	comando = UDR0;  // Capturar comando del usuario
}

// Mostrar menú en terminal
void mostrarMenu(void) {
	writeString("\r\n=== Menu ===");
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 7e 00 	call	0xfc	; 0xfc <writeString>
	writeString("\r\n1. Leer Potenciometro");
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 7e 00 	call	0xfc	; 0xfc <writeString>
	writeString("\r\n2. Enviar ASCII");
 132:	87 e2       	ldi	r24, 0x27	; 39
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 7e 00 	call	0xfc	; 0xfc <writeString>
	writeString("\r\nSeleccione opcion: ");
 13a:	89 e3       	ldi	r24, 0x39	; 57
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 7e 00 	call	0xfc	; 0xfc <writeString>
 142:	08 95       	ret

00000144 <main>:
void mostrarMenu(void);

volatile char comando = 0;  // Almacena el comando recibido

int main(void) {
	setup();
 144:	0e 94 60 00 	call	0xc0	; 0xc0 <setup>
	writeString("Sistema listo\r\n");
 148:	8f e4       	ldi	r24, 0x4F	; 79
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 7e 00 	call	0xfc	; 0xfc <writeString>
	
	while(1) {
		mostrarMenu();
 150:	0e 94 91 00 	call	0x122	; 0x122 <mostrarMenu>
		
		// Esperar comando del usuario
		while(comando == 0);
 154:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 158:	88 23       	and	r24, r24
 15a:	e1 f3       	breq	.-8      	; 0x154 <main+0x10>
		
		switch(comando) {
 15c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
			case '2':
			
			break;
		}
		
		comando = 0;  // Resetear comando
 160:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
	}
 164:	f5 cf       	rjmp	.-22     	; 0x150 <main+0xc>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
