
Postlaboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00000270  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001a8  008001a8  000003ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e5  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ba  00000000  00000000  00000e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035c  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000155  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3a       	cpi	r26, 0xA8	; 168
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ea       	ldi	r26, 0xA8	; 168
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3a       	cpi	r26, 0xA9	; 169
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  9e:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUAT>:
    sei();
}

// Inicializar USART (9600 bauds, 8N1)
void initUAT(void) {
    UBRR0 = 103;
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
  b2:	88 e9       	ldi	r24, 0x98	; 152
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  be:	08 95       	ret

000000c0 <setup>:
    }
}

// Configuración inicial
void setup(void) {
    cli();
  c0:	f8 94       	cli
    DDRB = 0xFF;        // Puerto B como salida
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 b9       	out	0x04, r24	; 4
    // Configurar ADC
    ADMUX = (1 << REFS0); // AVcc como referencia, ADC0
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // ADC enable, prescaler 128
  cc:	87 e8       	ldi	r24, 0x87	; 135
  ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    initUAT();          // Inicializar USART
  d2:	0e 94 53 00 	call	0xa6	; 0xa6 <initUAT>
    sei();
  d6:	78 94       	sei
  d8:	08 95       	ret

000000da <__vector_18>:
    UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

// Interrupción de recepción serial
ISR(USART_RX_vect) {
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
    comando = UDR0;  // Capturar comando del usuario
  e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ea:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
}
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <writeChar>:
    writeString("\r\nSeleccione opcion: ");
}

// Funciones básicas de USART
void writeChar(char c) {
    while(!(UCSR0A & (1 << UDRE0)));
  fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fe:	95 ff       	sbrs	r25, 5
 100:	fc cf       	rjmp	.-8      	; 0xfa <writeChar>
    UDR0 = c;
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 106:	08 95       	ret

00000108 <writeString>:
}

void writeString(const char* s) {
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	8c 01       	movw	r16, r24
    for(uint8_t i=0; s[i]!='\0'; i++) writeChar(s[i]);
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	03 c0       	rjmp	.+6      	; 0x11a <writeString+0x12>
 114:	0e 94 7d 00 	call	0xfa	; 0xfa <writeChar>
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	f8 01       	movw	r30, r16
 11c:	ec 0f       	add	r30, r28
 11e:	f1 1d       	adc	r31, r1
 120:	80 81       	ld	r24, Z
 122:	81 11       	cpse	r24, r1
 124:	f7 cf       	rjmp	.-18     	; 0x114 <writeString+0xc>
}
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <mostrarMenu>:
    comando = UDR0;  // Capturar comando del usuario
}

// Mostrar menú en terminal
void mostrarMenu(void) {
    writeString("\r\n=== Menu ===");
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
    writeString("\r\n1. Leer Potenciometro");
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
    writeString("\r\n2. Enviar ASCII");
 13e:	87 e2       	ldi	r24, 0x27	; 39
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
    writeString("\r\nSeleccione opcion: ");
 146:	89 e3       	ldi	r24, 0x39	; 57
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
 14e:	08 95       	ret

00000150 <main>:
void writeString(const char* s);
void mostrarMenu(void);

volatile char comando = 0;  // Almacena el comando recibido

int main(void) {
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	2a 97       	sbiw	r28, 0x0a	; 10
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
    setup();
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <setup>
    writeString("Sistema listo\r\n");
 168:	8f e4       	ldi	r24, 0x4F	; 79
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
    
    while(1) {
        mostrarMenu();
 170:	0e 94 97 00 	call	0x12e	; 0x12e <mostrarMenu>
        
        // Esperar comando del usuario
        while(comando == 0);
 174:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 178:	88 23       	and	r24, r24
 17a:	e1 f3       	breq	.-8      	; 0x174 <main+0x24>
        
        switch(comando) {
 17c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 180:	81 33       	cpi	r24, 0x31	; 49
 182:	19 f0       	breq	.+6      	; 0x18a <main+0x3a>
 184:	82 33       	cpi	r24, 0x32	; 50
 186:	09 f1       	breq	.+66     	; 0x1ca <main+0x7a>
 188:	39 c0       	rjmp	.+114    	; 0x1fc <main+0xac>
            case '1': {
                ADCSRA |= (1 << ADSC);         // Iniciar conversión
 18a:	ea e7       	ldi	r30, 0x7A	; 122
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 83       	st	Z, r24
                while (ADCSRA & (1 << ADSC));  // Esperar fin de conversión
 194:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 198:	86 fd       	sbrc	r24, 6
 19a:	fc cf       	rjmp	.-8      	; 0x194 <main+0x44>
                uint16_t adc_value = ADC;      // Leer valor
 19c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1a0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1a4:	4a e0       	ldi	r20, 0x0A	; 10
 1a6:	be 01       	movw	r22, r28
 1a8:	6f 5f       	subi	r22, 0xFF	; 255
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	0e 94 01 01 	call	0x202	; 0x202 <__itoa_ncheck>
                
                char buffer[10];
                itoa(adc_value, buffer, 10);   // Convertir a cadena
                writeString("Valor del potenciometro: ");
 1b0:	8f e5       	ldi	r24, 0x5F	; 95
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
                writeString(buffer);
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
                writeString("\r\n");
 1c0:	8c e5       	ldi	r24, 0x5C	; 92
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
 1c8:	19 c0       	rjmp	.+50     	; 0x1fc <main+0xac>
                break;
            }
            
            case '2': {
                writeString("\r\nIngrese un caracter: ");
 1ca:	89 e7       	ldi	r24, 0x79	; 121
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
                comando = 0;  // Reiniciar para capturar nuevo carácter
 1d2:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
                while (comando == 0);  // Esperar nuevo carácter
 1d6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 1da:	88 23       	and	r24, r24
 1dc:	e1 f3       	breq	.-8      	; 0x1d6 <main+0x86>
                
                PORTB = comando;  // Mostrar ASCII en LEDs
 1de:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 1e2:	85 b9       	out	0x05, r24	; 5
                writeString("\r\nCaracter recibido: ");
 1e4:	81 e9       	ldi	r24, 0x91	; 145
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
                writeChar(comando);
 1ec:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 1f0:	0e 94 7d 00 	call	0xfa	; 0xfa <writeChar>
                writeString("\r\n");
 1f4:	8c e5       	ldi	r24, 0x5C	; 92
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
                break;
            }
        }
        
        comando = 0;  // Resetear comando para nueva selección
 1fc:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
    }
 200:	b7 cf       	rjmp	.-146    	; 0x170 <main+0x20>

00000202 <__itoa_ncheck>:
 202:	bb 27       	eor	r27, r27
 204:	4a 30       	cpi	r20, 0x0A	; 10
 206:	31 f4       	brne	.+12     	; 0x214 <__itoa_ncheck+0x12>
 208:	99 23       	and	r25, r25
 20a:	22 f4       	brpl	.+8      	; 0x214 <__itoa_ncheck+0x12>
 20c:	bd e2       	ldi	r27, 0x2D	; 45
 20e:	90 95       	com	r25
 210:	81 95       	neg	r24
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__utoa_common>

00000218 <__utoa_ncheck>:
 218:	bb 27       	eor	r27, r27

0000021a <__utoa_common>:
 21a:	fb 01       	movw	r30, r22
 21c:	55 27       	eor	r21, r21
 21e:	aa 27       	eor	r26, r26
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	aa 1f       	adc	r26, r26
 226:	a4 17       	cp	r26, r20
 228:	10 f0       	brcs	.+4      	; 0x22e <__utoa_common+0x14>
 22a:	a4 1b       	sub	r26, r20
 22c:	83 95       	inc	r24
 22e:	50 51       	subi	r21, 0x10	; 16
 230:	b9 f7       	brne	.-18     	; 0x220 <__utoa_common+0x6>
 232:	a0 5d       	subi	r26, 0xD0	; 208
 234:	aa 33       	cpi	r26, 0x3A	; 58
 236:	08 f0       	brcs	.+2      	; 0x23a <__utoa_common+0x20>
 238:	a9 5d       	subi	r26, 0xD9	; 217
 23a:	a1 93       	st	Z+, r26
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	79 f7       	brne	.-34     	; 0x21e <__utoa_common+0x4>
 240:	b1 11       	cpse	r27, r1
 242:	b1 93       	st	Z+, r27
 244:	11 92       	st	Z+, r1
 246:	cb 01       	movw	r24, r22
 248:	0c 94 26 01 	jmp	0x24c	; 0x24c <strrev>

0000024c <strrev>:
 24c:	dc 01       	movw	r26, r24
 24e:	fc 01       	movw	r30, r24
 250:	67 2f       	mov	r22, r23
 252:	71 91       	ld	r23, Z+
 254:	77 23       	and	r23, r23
 256:	e1 f7       	brne	.-8      	; 0x250 <strrev+0x4>
 258:	32 97       	sbiw	r30, 0x02	; 2
 25a:	04 c0       	rjmp	.+8      	; 0x264 <strrev+0x18>
 25c:	7c 91       	ld	r23, X
 25e:	6d 93       	st	X+, r22
 260:	70 83       	st	Z, r23
 262:	62 91       	ld	r22, -Z
 264:	ae 17       	cp	r26, r30
 266:	bf 07       	cpc	r27, r31
 268:	c8 f3       	brcs	.-14     	; 0x25c <strrev+0x10>
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
