
Postlaboratorio_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000004de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb2  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b7  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000755  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000021d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000514  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b2  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 88 00 	call	0x110	; 0x110 <main>
  88:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
		_delay_ms(10);
	}
}

void initADC(void) {
	ADMUX  = (1 << REFS0) | (1 << ADLAR);
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Configuración común del ADC se habilita y se deshabilitan entradas digitales en PC0 y PC1.
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0  = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D); // Deshabilitar entrada digital en PC0, pc1 y pc2
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  a2:	08 95       	ret

000000a4 <readADC_PC0>:
}

uint8_t readADC_PC0(void) {
	ADMUX = (1 << REFS0) | (1 << ADLAR); // Selecciona canal ADC0 (PC0)
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b8:	86 fd       	sbrc	r24, 6
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <readADC_PC0+0x10>
	return ADCH;
  bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  c0:	08 95       	ret

000000c2 <readADC_PC1>:

uint8_t readADC_PC1(void) {
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX0); // Selecciona canal ADC1 (PC1)
  c2:	81 e6       	ldi	r24, 0x61	; 97
  c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d6:	86 fd       	sbrc	r24, 6
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <readADC_PC1+0x10>
	//conversión
	ADCSRA |= (1 << ADSC);
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e8:	86 fd       	sbrc	r24, 6
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <readADC_PC1+0x22>
	return ADCH;
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  f0:	08 95       	ret

000000f2 <readADC_PC2>:

uint8_t readADC_PC2(void) {
	//ADMUX = 0;
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX1); // Selecciona canal ADC1 (PC1)
  f2:	82 e6       	ldi	r24, 0x62	; 98
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC);
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 102:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 106:	86 fd       	sbrc	r24, 6
 108:	fc cf       	rjmp	.-8      	; 0x102 <readADC_PC2+0x10>
	//conversión
	//ADCSRA |= (1 << ADSC);
	//while (ADCSRA & (1 << ADSC));
	return ADCH;
 10a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 10e:	08 95       	ret

00000110 <main>:
void initADC(void);
uint8_t readADC_PC0(void);
uint8_t readADC_PC1(void);
uint8_t readADC_PC2(void);
int main(void) {
	cli();
 110:	f8 94       	cli
	// Inicializamos PWM para servo 1 en PD6 (Timer0) y servo 2 en PD3 (Timer2)
	initPWMFastA(non_invert, 1024); // Para servo en PD6 (Timer0) ~16ms de período
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	74 e0       	ldi	r23, 0x04	; 4
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 c3 01 	call	0x386	; 0x386 <initPWMFastA>
	initPWMFastB(non_invert, 1024); // Para servo en PD3 (Timer2) ~16ms de período
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	74 e0       	ldi	r23, 0x04	; 4
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <initPWMFastB>
	initPWM3(1999, 1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	8f ec       	ldi	r24, 0xCF	; 207
 12c:	97 e0       	ldi	r25, 0x07	; 7
 12e:	0e 94 47 01 	call	0x28e	; 0x28e <initPWM3>
	initADC();
 132:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei();
 136:	78 94       	sei

	while (1) {
		uint8_t adc_value0 = readADC_PC0();  // Lectura en PC0 para servo en PD6
 138:	0e 94 52 00 	call	0xa4	; 0xa4 <readADC_PC0>
 13c:	d8 2f       	mov	r29, r24
		uint8_t adc_value1 = readADC_PC1();  // Lectura en PC1 para servo en PD3
 13e:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC_PC1>
 142:	18 2f       	mov	r17, r24
		uint8_t adc3 = readADC_PC2();	// Lectura en PC2 para led
 144:	0e 94 79 00 	call	0xf2	; 0xf2 <readADC_PC2>
 148:	c8 2f       	mov	r28, r24
		// Mapeo de 0-255
		uint8_t pulse_ticks0 = 9 + ((uint16_t)adc_value0 * 28) / 255;
 14a:	4c e1       	ldi	r20, 0x1C	; 28
 14c:	4d 9f       	mul	r20, r29
 14e:	90 01       	movw	r18, r0
 150:	11 24       	eor	r1, r1
 152:	a1 e8       	ldi	r26, 0x81	; 129
 154:	b0 e8       	ldi	r27, 0x80	; 128
 156:	0e 94 24 02 	call	0x448	; 0x448 <__umulhisi3>
 15a:	fc 01       	movw	r30, r24
 15c:	ee 0f       	add	r30, r30
 15e:	ef 2f       	mov	r30, r31
 160:	ee 1f       	adc	r30, r30
 162:	ff 0b       	sbc	r31, r31
 164:	f1 95       	neg	r31
		uint8_t pulse_ticks1 = 9 + ((uint16_t)adc_value1 * 28) / 255;
 166:	41 9f       	mul	r20, r17
 168:	90 01       	movw	r18, r0
 16a:	11 24       	eor	r1, r1
 16c:	0e 94 24 02 	call	0x448	; 0x448 <__umulhisi3>
 170:	88 0f       	add	r24, r24
 172:	89 2f       	mov	r24, r25
 174:	88 1f       	adc	r24, r24
 176:	99 0b       	sbc	r25, r25
 178:	91 95       	neg	r25
 17a:	d9 e0       	ldi	r29, 0x09	; 9
 17c:	d8 0f       	add	r29, r24
		// Mapea 0–255 a 0–65535:
		//uint16_t duty = ((uint32_t)adc3 * 65535) / 255;
		updateDutyCycle(pulse_ticks0);   // Actualiza servo en PD6
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	8e 0f       	add	r24, r30
 182:	0e 94 00 02 	call	0x400	; 0x400 <updateDutyCycle>
		updateDutyCycle2(pulse_ticks1);  // Actualiza servo en PD3
 186:	8d 2f       	mov	r24, r29
 188:	0e 94 44 01 	call	0x288	; 0x288 <updateDutyCycle2>
		//setPWMDuty3(adc3);//duty);
		uint16_t duty = ((uint32_t)adc3 * 1999) / 255;
 18c:	2c 2f       	mov	r18, r28
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	af ec       	ldi	r26, 0xCF	; 207
 192:	b7 e0       	ldi	r27, 0x07	; 7
 194:	0e 94 24 02 	call	0x448	; 0x448 <__umulhisi3>
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	0e 94 02 02 	call	0x404	; 0x404 <__udivmodsi4>
		setPWMDuty3(duty);
 1a4:	c9 01       	movw	r24, r18
 1a6:	0e 94 8d 01 	call	0x31a	; 0x31a <setPWMDuty3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	9c e9       	ldi	r25, 0x9C	; 156
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x9e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xa4>
 1b4:	00 00       	nop
 1b6:	c0 cf       	rjmp	.-128    	; 0x138 <main+0x28>

000001b8 <initPWMFastB>:
 */ 
#include "PWM2.h"

void initPWMFastB(uint8_t invertido2, uint16_t prescaler2) {
	// Configurar PD3 (OC2B) como salida.
	DDRD |= (1 << DDD3);
 1b8:	9a b1       	in	r25, 0x0a	; 10
 1ba:	98 60       	ori	r25, 0x08	; 8
 1bc:	9a b9       	out	0x0a, r25	; 10
	
	// Limpiar registros de Timer2
	TCCR2A = 0;
 1be:	e0 eb       	ldi	r30, 0xB0	; 176
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	10 82       	st	Z, r1
	TCCR2B = 0;
 1c4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	// Configurar modo Fast PWM para Timer2:
	// Se activa el modo Fast PWM con TOP
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
 1c8:	90 81       	ld	r25, Z
 1ca:	93 60       	ori	r25, 0x03	; 3
 1cc:	90 83       	st	Z, r25
	
	// Configurar la salida en el canal OC2B (PD3)
	if (invertido2 == invert) {
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	21 f4       	brne	.+8      	; 0x1da <initPWMFastB+0x22>
		TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
 1d2:	80 81       	ld	r24, Z
 1d4:	80 63       	ori	r24, 0x30	; 48
 1d6:	80 83       	st	Z, r24
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <initPWMFastB+0x32>
		} else {
		TCCR2A |= (1 << COM2B1);
 1da:	e0 eb       	ldi	r30, 0xB0	; 176
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	80 83       	st	Z, r24
		TCCR2A &= ~(1 << COM2B0);
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 7e       	andi	r24, 0xEF	; 239
 1e8:	80 83       	st	Z, r24
	}
	
	// Limpiar bits de prescaler
	TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));
 1ea:	e1 eb       	ldi	r30, 0xB1	; 177
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 7f       	andi	r24, 0xF8	; 248
 1f2:	80 83       	st	Z, r24
	// Configuración adecuada según el prescaler deseado:
	switch(prescaler2) {
 1f4:	60 34       	cpi	r22, 0x40	; 64
 1f6:	71 05       	cpc	r23, r1
 1f8:	49 f1       	breq	.+82     	; 0x24c <initPWMFastB+0x94>
 1fa:	50 f4       	brcc	.+20     	; 0x210 <initPWMFastB+0x58>
 1fc:	68 30       	cpi	r22, 0x08	; 8
 1fe:	71 05       	cpc	r23, r1
 200:	c9 f0       	breq	.+50     	; 0x234 <initPWMFastB+0x7c>
 202:	60 32       	cpi	r22, 0x20	; 32
 204:	71 05       	cpc	r23, r1
 206:	e1 f0       	breq	.+56     	; 0x240 <initPWMFastB+0x88>
 208:	61 30       	cpi	r22, 0x01	; 1
 20a:	71 05       	cpc	r23, r1
 20c:	b9 f5       	brne	.+110    	; 0x27c <initPWMFastB+0xc4>
 20e:	0c c0       	rjmp	.+24     	; 0x228 <initPWMFastB+0x70>
 210:	61 15       	cp	r22, r1
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	78 07       	cpc	r23, r24
 216:	31 f1       	breq	.+76     	; 0x264 <initPWMFastB+0xac>
 218:	61 15       	cp	r22, r1
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	78 07       	cpc	r23, r24
 21e:	41 f1       	breq	.+80     	; 0x270 <initPWMFastB+0xb8>
 220:	60 38       	cpi	r22, 0x80	; 128
 222:	71 05       	cpc	r23, r1
 224:	59 f5       	brne	.+86     	; 0x27c <initPWMFastB+0xc4>
 226:	18 c0       	rjmp	.+48     	; 0x258 <initPWMFastB+0xa0>
		case 1:
		TCCR2B |= (1 << CS20);        // 001 -> clock/1
 228:	e1 eb       	ldi	r30, 0xB1	; 177
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
		break;
 232:	08 95       	ret
		case 8:
		TCCR2B |= (1 << CS21);        // 010 -> clock/8
 234:	e1 eb       	ldi	r30, 0xB1	; 177
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	80 83       	st	Z, r24
		break;
 23e:	08 95       	ret
		case 32:
		TCCR2B |= (1 << CS21) | (1 << CS20); // 011 -> clock/32
 240:	e1 eb       	ldi	r30, 0xB1	; 177
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	83 60       	ori	r24, 0x03	; 3
 248:	80 83       	st	Z, r24
		break;
 24a:	08 95       	ret
		case 64:
		TCCR2B |= (1 << CS22);        // 100 -> clock/64
 24c:	e1 eb       	ldi	r30, 0xB1	; 177
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	84 60       	ori	r24, 0x04	; 4
 254:	80 83       	st	Z, r24
		break;
 256:	08 95       	ret
		case 128:
		TCCR2B |= (1 << CS22) | (1 << CS20); // 101 -> clock/128
 258:	e1 eb       	ldi	r30, 0xB1	; 177
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	85 60       	ori	r24, 0x05	; 5
 260:	80 83       	st	Z, r24
		break;
 262:	08 95       	ret
		case 256:
		TCCR2B |= (1 << CS22) | (1 << CS21); // 110 -> clock/256
 264:	e1 eb       	ldi	r30, 0xB1	; 177
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	86 60       	ori	r24, 0x06	; 6
 26c:	80 83       	st	Z, r24
		break;
 26e:	08 95       	ret
		case 1024:
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // 111 -> clock/1024
 270:	e1 eb       	ldi	r30, 0xB1	; 177
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	87 60       	ori	r24, 0x07	; 7
 278:	80 83       	st	Z, r24
		break;
 27a:	08 95       	ret
		default:
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // Predeterminado: 1024
 27c:	e1 eb       	ldi	r30, 0xB1	; 177
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	87 60       	ori	r24, 0x07	; 7
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <updateDutyCycle2>:
	}
}

void updateDutyCycle2(uint8_t ticks2) {
	// Actualiza el OCR2B, OC2B = PD3.
	OCR2B = ticks2;
 288:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 28c:	08 95       	ret

0000028e <initPWM3>:
uint8_t pwm3_counter = 0;
uint8_t pwm3_disparo = 0;

// Inicialización de Timer1 en modo Normal con overflow y compare-A interrupciones
void initPWM3(uint16_t top, uint16_t prescaler)
{
 28e:	9c 01       	movw	r18, r24
	
	// Pin PB1 como salida
	DDRB |= (1 << DDB1);
 290:	94 b1       	in	r25, 0x04	; 4
 292:	92 60       	ori	r25, 0x02	; 2
 294:	94 b9       	out	0x04, r25	; 4

	// Modo Normal: WGM13:0 = 0
	TCCR1A = 0;
 296:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 29a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Habilitar interrupciones: overflow y compare match A
	TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	OCR1A = top;
 2a4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2a8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	// Selección de prescaler en TCCR1B
	switch (prescaler) {
 2ac:	60 34       	cpi	r22, 0x40	; 64
 2ae:	71 05       	cpc	r23, r1
 2b0:	e1 f0       	breq	.+56     	; 0x2ea <initPWM3+0x5c>
 2b2:	38 f4       	brcc	.+14     	; 0x2c2 <initPWM3+0x34>
 2b4:	61 30       	cpi	r22, 0x01	; 1
 2b6:	71 05       	cpc	r23, r1
 2b8:	61 f0       	breq	.+24     	; 0x2d2 <initPWM3+0x44>
 2ba:	68 30       	cpi	r22, 0x08	; 8
 2bc:	71 05       	cpc	r23, r1
 2be:	79 f0       	breq	.+30     	; 0x2de <initPWM3+0x50>
 2c0:	26 c0       	rjmp	.+76     	; 0x30e <initPWM3+0x80>
 2c2:	61 15       	cp	r22, r1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	78 07       	cpc	r23, r24
 2c8:	b1 f0       	breq	.+44     	; 0x2f6 <initPWM3+0x68>
 2ca:	61 15       	cp	r22, r1
 2cc:	74 40       	sbci	r23, 0x04	; 4
 2ce:	c9 f0       	breq	.+50     	; 0x302 <initPWM3+0x74>
 2d0:	1e c0       	rjmp	.+60     	; 0x30e <initPWM3+0x80>
		case 1:    TCCR1B |= (1 << CS10);                            break;
 2d2:	e1 e8       	ldi	r30, 0x81	; 129
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	80 83       	st	Z, r24
 2dc:	08 95       	ret
		case 8:    TCCR1B |= (1 << CS11);                            break;
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret
		case 64:   TCCR1B |= (1 << CS11) | (1 << CS10);              break;
 2ea:	e1 e8       	ldi	r30, 0x81	; 129
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	83 60       	ori	r24, 0x03	; 3
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret
		case 256:  TCCR1B |= (1 << CS12);                            break;
 2f6:	e1 e8       	ldi	r30, 0x81	; 129
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	84 60       	ori	r24, 0x04	; 4
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret
		case 1024: TCCR1B |= (1 << CS12) | (1 << CS10);              break;
 302:	e1 e8       	ldi	r30, 0x81	; 129
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	85 60       	ori	r24, 0x05	; 5
 30a:	80 83       	st	Z, r24
 30c:	08 95       	ret
		default:   TCCR1B |= (1 << CS12) | (1 << CS10);              break;
 30e:	e1 e8       	ldi	r30, 0x81	; 129
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	85 60       	ori	r24, 0x05	; 5
 316:	80 83       	st	Z, r24
 318:	08 95       	ret

0000031a <setPWMDuty3>:
}

// Cambia el valor de OCR1A para ajustar el duty cycle
void setPWMDuty3(uint16_t duty)
{
	if (duty > OCR1A) duty = OCR1A;
 31a:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 31e:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 322:	28 17       	cp	r18, r24
 324:	39 07       	cpc	r19, r25
 326:	20 f4       	brcc	.+8      	; 0x330 <setPWMDuty3+0x16>
 328:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 32c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1B = duty;
 330:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 334:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 338:	08 95       	ret

0000033a <__vector_13>:
	//OCR1A = duty;
}

// ISR: al desbordarse Timer1 (TCNT1=0) ? LED ON
ISR(TIMER1_OVF_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
	//pwm3_counter ++;
	//if(pwm3_counter == 0){
	PORTB |= (1 << PB1);
 346:	85 b1       	in	r24, 0x05	; 5
 348:	82 60       	ori	r24, 0x02	; 2
 34a:	85 b9       	out	0x05, r24	; 5
	//}
}
 34c:	8f 91       	pop	r24
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_11>:

// ISR: al alcanzar OCR1A ? LED OFF
ISR(TIMER1_COMPA_vect)
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
	if(pwm3_counter >= pwm3_disparo){
 366:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pwm3_counter>
 36a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36e:	98 17       	cp	r25, r24
 370:	18 f0       	brcs	.+6      	; 0x378 <__vector_11+0x20>
		PORTB &= ~(1 << PB1);
 372:	85 b1       	in	r24, 0x05	; 5
 374:	8d 7f       	andi	r24, 0xFD	; 253
 376:	85 b9       	out	0x05, r24	; 5
	}
}
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <initPWMFastA>:
 *  Author: samur
 */ 
#include "PWM.h"

void initPWMFastA(uint8_t invertido, uint16_t prescaler) {
	DDRD |= (1 << PORTD6); // PD6 como salida PWM
 386:	9a b1       	in	r25, 0x0a	; 10
 388:	90 64       	ori	r25, 0x40	; 64
 38a:	9a b9       	out	0x0a, r25	; 10
	
	// Modo Fast PWM (TOP = 0xFF)
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 38c:	94 b5       	in	r25, 0x24	; 36
 38e:	93 60       	ori	r25, 0x03	; 3
 390:	94 bd       	out	0x24, r25	; 36
	
	// Salida no invertida
	if (invertido == invert) {
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	21 f4       	brne	.+8      	; 0x39e <initPWMFastA+0x18>
		TCCR0A |= (1 << COM0A1) | (1 << COM0A0);
 396:	84 b5       	in	r24, 0x24	; 36
 398:	80 6c       	ori	r24, 0xC0	; 192
 39a:	84 bd       	out	0x24, r24	; 36
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <initPWMFastA+0x1e>
		} else {
		TCCR0A |= (1 << COM0A1);
 39e:	84 b5       	in	r24, 0x24	; 36
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	84 bd       	out	0x24, r24	; 36
	}
	
	// Configurar prescaler (1024 para período de ~16ms)
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
 3a4:	85 b5       	in	r24, 0x25	; 37
 3a6:	88 7f       	andi	r24, 0xF8	; 248
 3a8:	85 bd       	out	0x25, r24	; 37
	switch(prescaler) {
 3aa:	60 34       	cpi	r22, 0x40	; 64
 3ac:	71 05       	cpc	r23, r1
 3ae:	c1 f0       	breq	.+48     	; 0x3e0 <initPWMFastA+0x5a>
 3b0:	38 f4       	brcc	.+14     	; 0x3c0 <initPWMFastA+0x3a>
 3b2:	61 30       	cpi	r22, 0x01	; 1
 3b4:	71 05       	cpc	r23, r1
 3b6:	61 f0       	breq	.+24     	; 0x3d0 <initPWMFastA+0x4a>
 3b8:	68 30       	cpi	r22, 0x08	; 8
 3ba:	71 05       	cpc	r23, r1
 3bc:	69 f0       	breq	.+26     	; 0x3d8 <initPWMFastA+0x52>
 3be:	1c c0       	rjmp	.+56     	; 0x3f8 <initPWMFastA+0x72>
 3c0:	61 15       	cp	r22, r1
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	78 07       	cpc	r23, r24
 3c6:	81 f0       	breq	.+32     	; 0x3e8 <initPWMFastA+0x62>
 3c8:	61 15       	cp	r22, r1
 3ca:	74 40       	sbci	r23, 0x04	; 4
 3cc:	89 f0       	breq	.+34     	; 0x3f0 <initPWMFastA+0x6a>
 3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <initPWMFastA+0x72>
		case 1:    TCCR0B |= (1 << CS00); break;
 3d0:	85 b5       	in	r24, 0x25	; 37
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	85 bd       	out	0x25, r24	; 37
 3d6:	08 95       	ret
		case 8:    TCCR0B |= (1 << CS01); break;
 3d8:	85 b5       	in	r24, 0x25	; 37
 3da:	82 60       	ori	r24, 0x02	; 2
 3dc:	85 bd       	out	0x25, r24	; 37
 3de:	08 95       	ret
		case 64:   TCCR0B |= (1 << CS01) | (1 << CS00); break;
 3e0:	85 b5       	in	r24, 0x25	; 37
 3e2:	83 60       	ori	r24, 0x03	; 3
 3e4:	85 bd       	out	0x25, r24	; 37
 3e6:	08 95       	ret
		case 256:  TCCR0B |= (1 << CS02); break;
 3e8:	85 b5       	in	r24, 0x25	; 37
 3ea:	84 60       	ori	r24, 0x04	; 4
 3ec:	85 bd       	out	0x25, r24	; 37
 3ee:	08 95       	ret
		case 1024: TCCR0B |= (1 << CS02) | (1 << CS00); break;
 3f0:	85 b5       	in	r24, 0x25	; 37
 3f2:	85 60       	ori	r24, 0x05	; 5
 3f4:	85 bd       	out	0x25, r24	; 37
 3f6:	08 95       	ret
		default:   TCCR0B |= (1 << CS02) | (1 << CS00); break;
 3f8:	85 b5       	in	r24, 0x25	; 37
 3fa:	85 60       	ori	r24, 0x05	; 5
 3fc:	85 bd       	out	0x25, r24	; 37
 3fe:	08 95       	ret

00000400 <updateDutyCycle>:
	}
}

void updateDutyCycle(uint8_t ticks) {
	OCR0A = ticks; // Ciclo de trabajo (0-255)
 400:	87 bd       	out	0x27, r24	; 39
 402:	08 95       	ret

00000404 <__udivmodsi4>:
 404:	a1 e2       	ldi	r26, 0x21	; 33
 406:	1a 2e       	mov	r1, r26
 408:	aa 1b       	sub	r26, r26
 40a:	bb 1b       	sub	r27, r27
 40c:	fd 01       	movw	r30, r26
 40e:	0d c0       	rjmp	.+26     	; 0x42a <__udivmodsi4_ep>

00000410 <__udivmodsi4_loop>:
 410:	aa 1f       	adc	r26, r26
 412:	bb 1f       	adc	r27, r27
 414:	ee 1f       	adc	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	a2 17       	cp	r26, r18
 41a:	b3 07       	cpc	r27, r19
 41c:	e4 07       	cpc	r30, r20
 41e:	f5 07       	cpc	r31, r21
 420:	20 f0       	brcs	.+8      	; 0x42a <__udivmodsi4_ep>
 422:	a2 1b       	sub	r26, r18
 424:	b3 0b       	sbc	r27, r19
 426:	e4 0b       	sbc	r30, r20
 428:	f5 0b       	sbc	r31, r21

0000042a <__udivmodsi4_ep>:
 42a:	66 1f       	adc	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	1a 94       	dec	r1
 434:	69 f7       	brne	.-38     	; 0x410 <__udivmodsi4_loop>
 436:	60 95       	com	r22
 438:	70 95       	com	r23
 43a:	80 95       	com	r24
 43c:	90 95       	com	r25
 43e:	9b 01       	movw	r18, r22
 440:	ac 01       	movw	r20, r24
 442:	bd 01       	movw	r22, r26
 444:	cf 01       	movw	r24, r30
 446:	08 95       	ret

00000448 <__umulhisi3>:
 448:	a2 9f       	mul	r26, r18
 44a:	b0 01       	movw	r22, r0
 44c:	b3 9f       	mul	r27, r19
 44e:	c0 01       	movw	r24, r0
 450:	a3 9f       	mul	r26, r19
 452:	70 0d       	add	r23, r0
 454:	81 1d       	adc	r24, r1
 456:	11 24       	eor	r1, r1
 458:	91 1d       	adc	r25, r1
 45a:	b2 9f       	mul	r27, r18
 45c:	70 0d       	add	r23, r0
 45e:	81 1d       	adc	r24, r1
 460:	11 24       	eor	r1, r1
 462:	91 1d       	adc	r25, r1
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
