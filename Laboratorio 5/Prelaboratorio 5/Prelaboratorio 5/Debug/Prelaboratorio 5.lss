
Prelaboratorio 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009fa  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000819  00000000  00000000  00000e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000598  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a6  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ba  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
	}
}

void initADC(void) {
	// Configuración común del ADC se habilita y se deshabilitan entradas digitales en PC0 y PC1.
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1 << ADC0D) | (1 << ADC1D); // Deshabilitar entrada digital en PC0 Y PC1
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  8c:	08 95       	ret

0000008e <readADC_PC0>:
}

uint8_t readADC_PC0(void) {
	ADMUX = (1 << REFS0) | (1 << ADLAR); // Selecciona canal ADC0 (PC0)
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC);
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a2:	86 fd       	sbrc	r24, 6
  a4:	fc cf       	rjmp	.-8      	; 0x9e <readADC_PC0+0x10>
	return ADCH;
  a6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  aa:	08 95       	ret

000000ac <readADC_PC1>:

uint8_t readADC_PC1(void) {
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX0); // Selecciona canal ADC1 (PC1)
  ac:	81 e6       	ldi	r24, 0x61	; 97
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c0:	86 fd       	sbrc	r24, 6
  c2:	fc cf       	rjmp	.-8      	; 0xbc <readADC_PC1+0x10>
	// Ahora hacemos la conversión real:
	ADCSRA |= (1 << ADSC);
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d2:	86 fd       	sbrc	r24, 6
  d4:	fc cf       	rjmp	.-8      	; 0xce <readADC_PC1+0x22>
	return ADCH;
  d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  da:	08 95       	ret

000000dc <main>:
void initADC(void);
uint8_t readADC_PC0(void);
uint8_t readADC_PC1(void);

int main(void) {
	cli();
  dc:	f8 94       	cli
	// Inicializamos PWM para servo 1 en PD6 (Timer0) y servo 2 en PD3 (Timer2)
	initPWMFastA(non_invert, 1024); // Para servo en PD6 (Timer0) ~16ms de período
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	74 e0       	ldi	r23, 0x04	; 4
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 18 01 	call	0x230	; 0x230 <initPWMFastA>
	initPWMFastB(non_invert, 1024); // Para servo en PD3 (Timer2) ~16ms de período
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	74 e0       	ldi	r23, 0x04	; 4
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 ad 00 	call	0x15a	; 0x15a <initPWMFastB>
	initADC();
  f2:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
	sei();
  f6:	78 94       	sei

	while (1) {
		uint8_t adc_value0 = readADC_PC0();  // Lectura en PC0 para servo en PD6
  f8:	0e 94 47 00 	call	0x8e	; 0x8e <readADC_PC0>
  fc:	c8 2f       	mov	r28, r24
		uint8_t adc_value1 = readADC_PC1();  // Lectura en PC1 para servo en PD3
  fe:	0e 94 56 00 	call	0xac	; 0xac <readADC_PC1>
 102:	58 2f       	mov	r21, r24

		// Mapeo de 0-255
		uint8_t pulse_ticks0 = 9 + ((uint16_t)adc_value0 * 28) / 255;
 104:	4c e1       	ldi	r20, 0x1C	; 28
 106:	4c 9f       	mul	r20, r28
 108:	90 01       	movw	r18, r0
 10a:	11 24       	eor	r1, r1
 10c:	a1 e8       	ldi	r26, 0x81	; 129
 10e:	b0 e8       	ldi	r27, 0x80	; 128
 110:	0e 94 57 01 	call	0x2ae	; 0x2ae <__umulhisi3>
 114:	fc 01       	movw	r30, r24
 116:	ee 0f       	add	r30, r30
 118:	ef 2f       	mov	r30, r31
 11a:	ee 1f       	adc	r30, r30
 11c:	ff 0b       	sbc	r31, r31
 11e:	f1 95       	neg	r31
		uint8_t pulse_ticks1 = 9 + ((uint16_t)adc_value1 * 28) / 255;
 120:	45 9f       	mul	r20, r21
 122:	90 01       	movw	r18, r0
 124:	11 24       	eor	r1, r1
 126:	0e 94 57 01 	call	0x2ae	; 0x2ae <__umulhisi3>
 12a:	88 0f       	add	r24, r24
 12c:	89 2f       	mov	r24, r25
 12e:	88 1f       	adc	r24, r24
 130:	99 0b       	sbc	r25, r25
 132:	91 95       	neg	r25
 134:	c9 e0       	ldi	r28, 0x09	; 9
 136:	c8 0f       	add	r28, r24

		updateDutyCycle(pulse_ticks0);   // Actualiza servo en PD6
 138:	89 e0       	ldi	r24, 0x09	; 9
 13a:	8e 0f       	add	r24, r30
 13c:	0e 94 55 01 	call	0x2aa	; 0x2aa <updateDutyCycle>
		updateDutyCycle2(pulse_ticks1);  // Actualiza servo en PD3
 140:	8c 2f       	mov	r24, r28
 142:	0e 94 15 01 	call	0x22a	; 0x22a <updateDutyCycle2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x70>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x7a>
 156:	00 00       	nop
 158:	cf cf       	rjmp	.-98     	; 0xf8 <main+0x1c>

0000015a <initPWMFastB>:
 */ 
#include "PWM2.h"

void initPWMFastB(uint8_t invertido2, uint16_t prescaler2) {
	// Configurar PD3 (OC2B) como salida.
	DDRD |= (1 << DDD3);
 15a:	9a b1       	in	r25, 0x0a	; 10
 15c:	98 60       	ori	r25, 0x08	; 8
 15e:	9a b9       	out	0x0a, r25	; 10
	
	// Limpiar registros de Timer2
	TCCR2A = 0;
 160:	e0 eb       	ldi	r30, 0xB0	; 176
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	10 82       	st	Z, r1
	TCCR2B = 0;
 166:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	// Configurar modo Fast PWM para Timer2:
	// Se activa el modo Fast PWM con TOP = 0xFF (WGM21 y WGM20 en 1)
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
 16a:	90 81       	ld	r25, Z
 16c:	93 60       	ori	r25, 0x03	; 3
 16e:	90 83       	st	Z, r25
	
	// Configurar la salida en el canal OC2B (PD3)
	if (invertido2 == invert) {
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	21 f4       	brne	.+8      	; 0x17c <initPWMFastB+0x22>
		TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
 174:	80 81       	ld	r24, Z
 176:	80 63       	ori	r24, 0x30	; 48
 178:	80 83       	st	Z, r24
 17a:	08 c0       	rjmp	.+16     	; 0x18c <initPWMFastB+0x32>
		} else {
		TCCR2A |= (1 << COM2B1);
 17c:	e0 eb       	ldi	r30, 0xB0	; 176
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 62       	ori	r24, 0x20	; 32
 184:	80 83       	st	Z, r24
		TCCR2A &= ~(1 << COM2B0);
 186:	80 81       	ld	r24, Z
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	80 83       	st	Z, r24
	}
	
	// Limpiar bits de prescaler
	TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));
 18c:	e1 eb       	ldi	r30, 0xB1	; 177
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 7f       	andi	r24, 0xF8	; 248
 194:	80 83       	st	Z, r24
	// Configuración adecuada según el prescaler deseado:
	switch(prescaler2) {
 196:	60 34       	cpi	r22, 0x40	; 64
 198:	71 05       	cpc	r23, r1
 19a:	49 f1       	breq	.+82     	; 0x1ee <initPWMFastB+0x94>
 19c:	50 f4       	brcc	.+20     	; 0x1b2 <initPWMFastB+0x58>
 19e:	68 30       	cpi	r22, 0x08	; 8
 1a0:	71 05       	cpc	r23, r1
 1a2:	c9 f0       	breq	.+50     	; 0x1d6 <initPWMFastB+0x7c>
 1a4:	60 32       	cpi	r22, 0x20	; 32
 1a6:	71 05       	cpc	r23, r1
 1a8:	e1 f0       	breq	.+56     	; 0x1e2 <initPWMFastB+0x88>
 1aa:	61 30       	cpi	r22, 0x01	; 1
 1ac:	71 05       	cpc	r23, r1
 1ae:	b9 f5       	brne	.+110    	; 0x21e <initPWMFastB+0xc4>
 1b0:	0c c0       	rjmp	.+24     	; 0x1ca <initPWMFastB+0x70>
 1b2:	61 15       	cp	r22, r1
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	78 07       	cpc	r23, r24
 1b8:	31 f1       	breq	.+76     	; 0x206 <initPWMFastB+0xac>
 1ba:	61 15       	cp	r22, r1
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	78 07       	cpc	r23, r24
 1c0:	41 f1       	breq	.+80     	; 0x212 <initPWMFastB+0xb8>
 1c2:	60 38       	cpi	r22, 0x80	; 128
 1c4:	71 05       	cpc	r23, r1
 1c6:	59 f5       	brne	.+86     	; 0x21e <initPWMFastB+0xc4>
 1c8:	18 c0       	rjmp	.+48     	; 0x1fa <initPWMFastB+0xa0>
		case 1:
		TCCR2B |= (1 << CS20);        // 001 -> clock/1
 1ca:	e1 eb       	ldi	r30, 0xB1	; 177
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24
		break;
 1d4:	08 95       	ret
		case 8:
		TCCR2B |= (1 << CS21);        // 010 -> clock/8
 1d6:	e1 eb       	ldi	r30, 0xB1	; 177
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	80 83       	st	Z, r24
		break;
 1e0:	08 95       	ret
		case 32:
		TCCR2B |= (1 << CS21) | (1 << CS20); // 011 -> clock/32
 1e2:	e1 eb       	ldi	r30, 0xB1	; 177
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	83 60       	ori	r24, 0x03	; 3
 1ea:	80 83       	st	Z, r24
		break;
 1ec:	08 95       	ret
		case 64:
		TCCR2B |= (1 << CS22);        // 100 -> clock/64
 1ee:	e1 eb       	ldi	r30, 0xB1	; 177
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	80 83       	st	Z, r24
		break;
 1f8:	08 95       	ret
		case 128:
		TCCR2B |= (1 << CS22) | (1 << CS20); // 101 -> clock/128
 1fa:	e1 eb       	ldi	r30, 0xB1	; 177
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	85 60       	ori	r24, 0x05	; 5
 202:	80 83       	st	Z, r24
		break;
 204:	08 95       	ret
		case 256:
		TCCR2B |= (1 << CS22) | (1 << CS21); // 110 -> clock/256
 206:	e1 eb       	ldi	r30, 0xB1	; 177
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	86 60       	ori	r24, 0x06	; 6
 20e:	80 83       	st	Z, r24
		break;
 210:	08 95       	ret
		case 1024:
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // 111 -> clock/1024
 212:	e1 eb       	ldi	r30, 0xB1	; 177
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	87 60       	ori	r24, 0x07	; 7
 21a:	80 83       	st	Z, r24
		break;
 21c:	08 95       	ret
		default:
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // Predeterminado: 1024
 21e:	e1 eb       	ldi	r30, 0xB1	; 177
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	87 60       	ori	r24, 0x07	; 7
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <updateDutyCycle2>:
	}
}

void updateDutyCycle2(uint8_t ticks2) {
	// Actualiza el OCR2B, ya que OC2B está en PD3.
	OCR2B = ticks2;
 22a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 22e:	08 95       	ret

00000230 <initPWMFastA>:
#include "PWM.h"

void initPWMFastA(uint8_t invertido, uint16_t prescaler) {
	DDRD |= (1 << PORTD6); // PD6 como salida PWM
 230:	9a b1       	in	r25, 0x0a	; 10
 232:	90 64       	ori	r25, 0x40	; 64
 234:	9a b9       	out	0x0a, r25	; 10
	
	// Modo Fast PWM (TOP = 0xFF)
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 236:	94 b5       	in	r25, 0x24	; 36
 238:	93 60       	ori	r25, 0x03	; 3
 23a:	94 bd       	out	0x24, r25	; 36
	
	// Salida no invertida
	if (invertido == invert) {
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	21 f4       	brne	.+8      	; 0x248 <initPWMFastA+0x18>
		TCCR0A |= (1 << COM0A1) | (1 << COM0A0);
 240:	84 b5       	in	r24, 0x24	; 36
 242:	80 6c       	ori	r24, 0xC0	; 192
 244:	84 bd       	out	0x24, r24	; 36
 246:	03 c0       	rjmp	.+6      	; 0x24e <initPWMFastA+0x1e>
		} else {
		TCCR0A |= (1 << COM0A1);
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	84 bd       	out	0x24, r24	; 36
	}
	
	// Configurar prescaler (1024 para período de ~16ms)
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
 24e:	85 b5       	in	r24, 0x25	; 37
 250:	88 7f       	andi	r24, 0xF8	; 248
 252:	85 bd       	out	0x25, r24	; 37
	switch(prescaler) {
 254:	60 34       	cpi	r22, 0x40	; 64
 256:	71 05       	cpc	r23, r1
 258:	c1 f0       	breq	.+48     	; 0x28a <initPWMFastA+0x5a>
 25a:	38 f4       	brcc	.+14     	; 0x26a <initPWMFastA+0x3a>
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	71 05       	cpc	r23, r1
 260:	61 f0       	breq	.+24     	; 0x27a <initPWMFastA+0x4a>
 262:	68 30       	cpi	r22, 0x08	; 8
 264:	71 05       	cpc	r23, r1
 266:	69 f0       	breq	.+26     	; 0x282 <initPWMFastA+0x52>
 268:	1c c0       	rjmp	.+56     	; 0x2a2 <initPWMFastA+0x72>
 26a:	61 15       	cp	r22, r1
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	78 07       	cpc	r23, r24
 270:	81 f0       	breq	.+32     	; 0x292 <initPWMFastA+0x62>
 272:	61 15       	cp	r22, r1
 274:	74 40       	sbci	r23, 0x04	; 4
 276:	89 f0       	breq	.+34     	; 0x29a <initPWMFastA+0x6a>
 278:	14 c0       	rjmp	.+40     	; 0x2a2 <initPWMFastA+0x72>
		case 1:    TCCR0B |= (1 << CS00); break;
 27a:	85 b5       	in	r24, 0x25	; 37
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	85 bd       	out	0x25, r24	; 37
 280:	08 95       	ret
		case 8:    TCCR0B |= (1 << CS01); break;
 282:	85 b5       	in	r24, 0x25	; 37
 284:	82 60       	ori	r24, 0x02	; 2
 286:	85 bd       	out	0x25, r24	; 37
 288:	08 95       	ret
		case 64:   TCCR0B |= (1 << CS01) | (1 << CS00); break;
 28a:	85 b5       	in	r24, 0x25	; 37
 28c:	83 60       	ori	r24, 0x03	; 3
 28e:	85 bd       	out	0x25, r24	; 37
 290:	08 95       	ret
		case 256:  TCCR0B |= (1 << CS02); break;
 292:	85 b5       	in	r24, 0x25	; 37
 294:	84 60       	ori	r24, 0x04	; 4
 296:	85 bd       	out	0x25, r24	; 37
 298:	08 95       	ret
		case 1024: TCCR0B |= (1 << CS02) | (1 << CS00); break;
 29a:	85 b5       	in	r24, 0x25	; 37
 29c:	85 60       	ori	r24, 0x05	; 5
 29e:	85 bd       	out	0x25, r24	; 37
 2a0:	08 95       	ret
		default:   TCCR0B |= (1 << CS02) | (1 << CS00); break;
 2a2:	85 b5       	in	r24, 0x25	; 37
 2a4:	85 60       	ori	r24, 0x05	; 5
 2a6:	85 bd       	out	0x25, r24	; 37
 2a8:	08 95       	ret

000002aa <updateDutyCycle>:
	}
}

void updateDutyCycle(uint8_t ticks) {
	OCR0A = ticks; // Ciclo de trabajo (0-255)
 2aa:	87 bd       	out	0x27, r24	; 39
 2ac:	08 95       	ret

000002ae <__umulhisi3>:
 2ae:	a2 9f       	mul	r26, r18
 2b0:	b0 01       	movw	r22, r0
 2b2:	b3 9f       	mul	r27, r19
 2b4:	c0 01       	movw	r24, r0
 2b6:	a3 9f       	mul	r26, r19
 2b8:	70 0d       	add	r23, r0
 2ba:	81 1d       	adc	r24, r1
 2bc:	11 24       	eor	r1, r1
 2be:	91 1d       	adc	r25, r1
 2c0:	b2 9f       	mul	r27, r18
 2c2:	70 0d       	add	r23, r0
 2c4:	81 1d       	adc	r24, r1
 2c6:	11 24       	eor	r1, r1
 2c8:	91 1d       	adc	r25, r1
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
