
Prelaboratorio 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089a  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000776  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d6  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000080  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
		_delay_ms(20);
	}
}

void initADC(void) {
	ADMUX = (1 << REFS0) | (1 << ADLAR); // Canal ADC0 (PC0), alineación izquierda
  80:	80 e6       	ldi	r24, 0x60	; 96
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128
  86:	87 ec       	ldi	r24, 0xC7	; 199
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1 << ADC0D); // Deshabilitar entrada digital en PC0
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  92:	08 95       	ret

00000094 <readADC>:
}

uint8_t readADC(void) {
	ADCSRA |= (1 << ADSC);
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a2:	86 fd       	sbrc	r24, 6
  a4:	fc cf       	rjmp	.-8      	; 0x9e <readADC+0xa>
	return ADCH; // Valor de 8 bits (0-255)
  a6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  aa:	08 95       	ret

000000ac <main>:

void initADC(void);
uint8_t readADC(void);

int main(void) {
	cli();
  ac:	f8 94       	cli
	initPWMFastA(non_invert, 1024); // Prescaler 1024 para período de ~16ms
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	74 e0       	ldi	r23, 0x04	; 4
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 7b 00 	call	0xf6	; 0xf6 <initPWMFastA>
	initADC();
  b8:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
	sei();
  bc:	78 94       	sei

	while (1) {
		uint8_t adc_value = readADC();
  be:	0e 94 4a 00 	call	0x94	; 0x94 <readADC>
		// Mapeo de 0-255 a 9-37 ticks (600-2400µs)
		uint8_t pulse_ticks = 9 + ((uint16_t)adc_value * 28) / 255;
  c2:	9c e1       	ldi	r25, 0x1C	; 28
  c4:	89 9f       	mul	r24, r25
  c6:	90 01       	movw	r18, r0
  c8:	11 24       	eor	r1, r1
  ca:	a1 e8       	ldi	r26, 0x81	; 129
  cc:	b0 e8       	ldi	r27, 0x80	; 128
  ce:	0e 94 ba 00 	call	0x174	; 0x174 <__umulhisi3>
  d2:	88 0f       	add	r24, r24
  d4:	89 2f       	mov	r24, r25
  d6:	88 1f       	adc	r24, r24
  d8:	99 0b       	sbc	r25, r25
  da:	91 95       	neg	r25
		updateDutyCycle(pulse_ticks);
  dc:	87 5f       	subi	r24, 0xF7	; 247
  de:	0e 94 b8 00 	call	0x170	; 0x170 <updateDutyCycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x3c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x46>
  f2:	00 00       	nop
  f4:	e4 cf       	rjmp	.-56     	; 0xbe <main+0x12>

000000f6 <initPWMFastA>:
#include "PWM.h"

void initPWMFastA(uint8_t invertido, uint16_t prescaler) {
	DDRD |= (1 << DDD6); // PD6 como salida PWM
  f6:	9a b1       	in	r25, 0x0a	; 10
  f8:	90 64       	ori	r25, 0x40	; 64
  fa:	9a b9       	out	0x0a, r25	; 10
	
	// Modo Fast PWM (TOP = 0xFF)
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  fc:	94 b5       	in	r25, 0x24	; 36
  fe:	93 60       	ori	r25, 0x03	; 3
 100:	94 bd       	out	0x24, r25	; 36
	
	// Salida no invertida
	if (invertido == invert) {
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	21 f4       	brne	.+8      	; 0x10e <initPWMFastA+0x18>
		TCCR0A |= (1 << COM0A1) | (1 << COM0A0);
 106:	84 b5       	in	r24, 0x24	; 36
 108:	80 6c       	ori	r24, 0xC0	; 192
 10a:	84 bd       	out	0x24, r24	; 36
 10c:	03 c0       	rjmp	.+6      	; 0x114 <initPWMFastA+0x1e>
		} else {
		TCCR0A |= (1 << COM0A1);
 10e:	84 b5       	in	r24, 0x24	; 36
 110:	80 68       	ori	r24, 0x80	; 128
 112:	84 bd       	out	0x24, r24	; 36
	}
	
	// Configurar prescaler (1024 para período de ~16ms)
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
 114:	85 b5       	in	r24, 0x25	; 37
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	85 bd       	out	0x25, r24	; 37
	switch(prescaler) {
 11a:	60 34       	cpi	r22, 0x40	; 64
 11c:	71 05       	cpc	r23, r1
 11e:	c1 f0       	breq	.+48     	; 0x150 <initPWMFastA+0x5a>
 120:	38 f4       	brcc	.+14     	; 0x130 <initPWMFastA+0x3a>
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	71 05       	cpc	r23, r1
 126:	61 f0       	breq	.+24     	; 0x140 <initPWMFastA+0x4a>
 128:	68 30       	cpi	r22, 0x08	; 8
 12a:	71 05       	cpc	r23, r1
 12c:	69 f0       	breq	.+26     	; 0x148 <initPWMFastA+0x52>
 12e:	1c c0       	rjmp	.+56     	; 0x168 <initPWMFastA+0x72>
 130:	61 15       	cp	r22, r1
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	78 07       	cpc	r23, r24
 136:	81 f0       	breq	.+32     	; 0x158 <initPWMFastA+0x62>
 138:	61 15       	cp	r22, r1
 13a:	74 40       	sbci	r23, 0x04	; 4
 13c:	89 f0       	breq	.+34     	; 0x160 <initPWMFastA+0x6a>
 13e:	14 c0       	rjmp	.+40     	; 0x168 <initPWMFastA+0x72>
		case 1:    TCCR0B |= (1 << CS00); break;
 140:	85 b5       	in	r24, 0x25	; 37
 142:	81 60       	ori	r24, 0x01	; 1
 144:	85 bd       	out	0x25, r24	; 37
 146:	08 95       	ret
		case 8:    TCCR0B |= (1 << CS01); break;
 148:	85 b5       	in	r24, 0x25	; 37
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	85 bd       	out	0x25, r24	; 37
 14e:	08 95       	ret
		case 64:   TCCR0B |= (1 << CS01) | (1 << CS00); break;
 150:	85 b5       	in	r24, 0x25	; 37
 152:	83 60       	ori	r24, 0x03	; 3
 154:	85 bd       	out	0x25, r24	; 37
 156:	08 95       	ret
		case 256:  TCCR0B |= (1 << CS02); break;
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	85 bd       	out	0x25, r24	; 37
 15e:	08 95       	ret
		case 1024: TCCR0B |= (1 << CS02) | (1 << CS00); break;
 160:	85 b5       	in	r24, 0x25	; 37
 162:	85 60       	ori	r24, 0x05	; 5
 164:	85 bd       	out	0x25, r24	; 37
 166:	08 95       	ret
		default:   TCCR0B |= (1 << CS02) | (1 << CS00); break;
 168:	85 b5       	in	r24, 0x25	; 37
 16a:	85 60       	ori	r24, 0x05	; 5
 16c:	85 bd       	out	0x25, r24	; 37
 16e:	08 95       	ret

00000170 <updateDutyCycle>:
	}
}

void updateDutyCycle(uint8_t ticks) {
	OCR0A = ticks; // Ciclo de trabajo (0-255)
 170:	87 bd       	out	0x27, r24	; 39
 172:	08 95       	ret

00000174 <__umulhisi3>:
 174:	a2 9f       	mul	r26, r18
 176:	b0 01       	movw	r22, r0
 178:	b3 9f       	mul	r27, r19
 17a:	c0 01       	movw	r24, r0
 17c:	a3 9f       	mul	r26, r19
 17e:	70 0d       	add	r23, r0
 180:	81 1d       	adc	r24, r1
 182:	11 24       	eor	r1, r1
 184:	91 1d       	adc	r25, r1
 186:	b2 9f       	mul	r27, r18
 188:	70 0d       	add	r23, r0
 18a:	81 1d       	adc	r24, r1
 18c:	11 24       	eor	r1, r1
 18e:	91 1d       	adc	r25, r1
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
