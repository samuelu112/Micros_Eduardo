
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000064a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c96  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093f  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000857  00000000  00000000  00001d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  88:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
    }
}

void initADC(void) {
    // AVcc ref + left adjust, free-running
    ADMUX  = (1 << REFS0) | (1 << ADLAR) | (current_channel & 0x07);
  90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  94:	87 70       	andi	r24, 0x07	; 7
  96:	80 66       	ori	r24, 0x60	; 96
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = (1 << ADEN)
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8f ea       	ldi	r24, 0xAF	; 175
  a2:	80 83       	st	Z, r24
           | (1 << ADIE)
           | (1 << ADATE)
           | (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
    ADCSRB = 0;
  a4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    DIDR0  = (1 << ADC0D)|(1 << ADC1D)|(1 << ADC2D)|(1 << ADC3D);
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
    ADCSRA |= (1 << ADSC);
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <main>:
volatile uint8_t  current_channel = 0;

void initADC(void);

int main(void) {
    cli();
  b6:	f8 94       	cli

    // Inicializar 4 servos
    initPWMFastA(non_invert, 1024);    // Servo1 (Timer0 OC0A on PD6)
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	74 e0       	ldi	r23, 0x04	; 4
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 5e 01 	call	0x2bc	; 0x2bc <initPWMFastA>
    initPWMFastB(non_invert, 1024);    // Servo2 (Timer2 OC2B on PD3)
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	74 e0       	ldi	r23, 0x04	; 4
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 9d 01 	call	0x33a	; 0x33a <initPWMFastB>
    initPWMFastB_T1(non_invert, 8);    // Servo3 (Timer1 OC1B on PB2), prescaler 8
  cc:	68 e0       	ldi	r22, 0x08	; 8
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 08 02 	call	0x410	; 0x410 <initPWMFastB_T1>
    initPWMFastA_T1(non_invert, 8);    // Servo4 (Timer1 OC1A on PB1), prescaler 8
  d6:	68 e0       	ldi	r22, 0x08	; 8
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <initPWMFastA_T1>

    // ADC free-running con interrupciones en 4 canales
    initADC();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <initADC>

    sei();
  e4:	78 94       	sei

    while (1) {
        // Mapea ADC (0–255) a ticks para servos 1&2 (9–37 ticks)
        uint16_t t0 =  9 + ((uint32_t)adc0_value * 28) / 255;
  e6:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <adc0_value>
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	db 01       	movw	r26, r22
  f2:	ca 01       	movw	r24, r20
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	aa 1f       	adc	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	aa 1f       	adc	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	aa 1f       	adc	r26, r26
 10a:	bb 1f       	adc	r27, r27
 10c:	8c 01       	movw	r16, r24
 10e:	9d 01       	movw	r18, r26
 110:	04 1b       	sub	r16, r20
 112:	15 0b       	sbc	r17, r21
 114:	26 0b       	sbc	r18, r22
 116:	37 0b       	sbc	r19, r23
 118:	c9 01       	movw	r24, r18
 11a:	b8 01       	movw	r22, r16
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	88 1f       	adc	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	88 1f       	adc	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	c1 2c       	mov	r12, r1
 12e:	d1 2c       	mov	r13, r1
 130:	76 01       	movw	r14, r12
 132:	ca 94       	dec	r12
 134:	a7 01       	movw	r20, r14
 136:	96 01       	movw	r18, r12
 138:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 13c:	c2 2f       	mov	r28, r18
        uint16_t t1 =  9 + ((uint32_t)adc1_value * 28) / 255;
 13e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <adc1_value>
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	db 01       	movw	r26, r22
 14a:	ca 01       	movw	r24, r20
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	aa 1f       	adc	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	aa 1f       	adc	r26, r26
 15a:	bb 1f       	adc	r27, r27
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	aa 1f       	adc	r26, r26
 162:	bb 1f       	adc	r27, r27
 164:	8c 01       	movw	r16, r24
 166:	9d 01       	movw	r18, r26
 168:	04 1b       	sub	r16, r20
 16a:	15 0b       	sbc	r17, r21
 16c:	26 0b       	sbc	r18, r22
 16e:	37 0b       	sbc	r19, r23
 170:	c9 01       	movw	r24, r18
 172:	b8 01       	movw	r22, r16
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	88 1f       	adc	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	88 1f       	adc	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	a7 01       	movw	r20, r14
 186:	96 01       	movw	r18, r12
 188:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 18c:	89 01       	movw	r16, r18
 18e:	07 5f       	subi	r16, 0xF7	; 247
 190:	1f 4f       	sbci	r17, 0xFF	; 255

        // Mapea ADC (0–1023) a ticks para servos 3&4:
        // 600 µs–2400 µs => en ticks de 0.5 µs: 1200–4800
        uint16_t t2 = 1200 + ((uint32_t)adc2_value * 3600) / 1023;
 192:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <adc2_value>
 196:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <adc2_value+0x1>
 19a:	a0 e1       	ldi	r26, 0x10	; 16
 19c:	be e0       	ldi	r27, 0x0E	; 14
 19e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__umulhisi3>
 1a2:	0f 2e       	mov	r0, r31
 1a4:	88 24       	eor	r8, r8
 1a6:	8a 94       	dec	r8
 1a8:	f3 e0       	ldi	r31, 0x03	; 3
 1aa:	9f 2e       	mov	r9, r31
 1ac:	a1 2c       	mov	r10, r1
 1ae:	b1 2c       	mov	r11, r1
 1b0:	f0 2d       	mov	r31, r0
 1b2:	a5 01       	movw	r20, r10
 1b4:	94 01       	movw	r18, r8
 1b6:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 1ba:	69 01       	movw	r12, r18
 1bc:	80 e5       	ldi	r24, 0x50	; 80
 1be:	c8 1a       	sub	r12, r24
 1c0:	8b ef       	ldi	r24, 0xFB	; 251
 1c2:	d8 0a       	sbc	r13, r24
        uint16_t t3 = 1200 + ((uint32_t)adc3_value * 3600) / 1023;
 1c4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <adc3_value>
 1c8:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <adc3_value+0x1>
 1cc:	a0 e1       	ldi	r26, 0x10	; 16
 1ce:	be e0       	ldi	r27, 0x0E	; 14
 1d0:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__umulhisi3>
 1d4:	a5 01       	movw	r20, r10
 1d6:	94 01       	movw	r18, r8
 1d8:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 1dc:	79 01       	movw	r14, r18
 1de:	90 e5       	ldi	r25, 0x50	; 80
 1e0:	e9 1a       	sub	r14, r25
 1e2:	9b ef       	ldi	r25, 0xFB	; 251
 1e4:	f9 0a       	sbc	r15, r25

        updateDutyCycle(t0);   // Servo1
 1e6:	89 e0       	ldi	r24, 0x09	; 9
 1e8:	8c 0f       	add	r24, r28
 1ea:	0e 94 9b 01 	call	0x336	; 0x336 <updateDutyCycle>
        updateDutyCycle2(t1);  // Servo2
 1ee:	80 2f       	mov	r24, r16
 1f0:	0e 94 05 02 	call	0x40a	; 0x40a <updateDutyCycle2>
        updateDutyCycle3(t2);  // Servo3
 1f4:	c6 01       	movw	r24, r12
 1f6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <updateDutyCycle3>
        updateDutyCycle4(t3);  // Servo4
 1fa:	c7 01       	movw	r24, r14
 1fc:	0e 94 b3 02 	call	0x566	; 0x566 <updateDutyCycle4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	89 ef       	ldi	r24, 0xF9	; 249
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x150>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x15a>
 210:	00 00       	nop
 212:	69 cf       	rjmp	.-302    	; 0xe6 <main+0x30>

00000214 <__vector_21>:
    DIDR0  = (1 << ADC0D)|(1 << ADC1D)|(1 << ADC2D)|(1 << ADC3D);
    ADCSRA |= (1 << ADSC);
}

// ADC ISR: rota canales 0?1?2?3 y guarda valores
ISR(ADC_vect) {
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
    switch (current_channel) {
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	71 f0       	breq	.+28     	; 0x24a <__vector_21+0x36>
 22e:	28 f0       	brcs	.+10     	; 0x23a <__vector_21+0x26>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	99 f0       	breq	.+38     	; 0x25a <__vector_21+0x46>
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	e9 f0       	breq	.+58     	; 0x272 <__vector_21+0x5e>
 238:	26 c0       	rjmp	.+76     	; 0x286 <__vector_21+0x72>
    case 0:
        adc0_value = ADCH;
 23a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 23e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc0_value>
        current_channel = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 248:	1e c0       	rjmp	.+60     	; 0x286 <__vector_21+0x72>
    case 1:
        adc1_value = ADCH;
 24a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 24e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc1_value>
        current_channel = 2;
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 258:	16 c0       	rjmp	.+44     	; 0x286 <__vector_21+0x72>
    case 2:
        adc2_value = ADC;  // 10-bit result
 25a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 25e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 262:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <adc2_value+0x1>
 266:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <adc2_value>
        current_channel = 3;
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 270:	0a c0       	rjmp	.+20     	; 0x286 <__vector_21+0x72>
    case 3:
        adc3_value = ADC;
 272:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 276:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 27a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <adc3_value+0x1>
 27e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc3_value>
        current_channel = 0;
 282:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
    // Prepara siguiente canal
    ADMUX = (1 << REFS0)
          | ((current_channel<2)? (1<<ADLAR):0)
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
        adc3_value = ADC;
        current_channel = 0;
        break;
    }
    // Prepara siguiente canal
    ADMUX = (1 << REFS0)
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	10 f4       	brcc	.+4      	; 0x292 <__vector_21+0x7e>
 28e:	90 e6       	ldi	r25, 0x60	; 96
 290:	01 c0       	rjmp	.+2      	; 0x294 <__vector_21+0x80>
 292:	90 e4       	ldi	r25, 0x40	; 64
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	87 70       	andi	r24, 0x07	; 7
 29a:	89 2b       	or	r24, r25
 29c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
          | ((current_channel<2)? (1<<ADLAR):0)
          | (current_channel & 0x07);
    ADCSRA |= (1 << ADSC);
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 83       	st	Z, r24
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <initPWMFastA>:
 *  Author: samur
 */ 
#include "PWM1.h"

void initPWMFastA(uint8_t invertido, uint16_t prescaler) {
	DDRD |= (1 << PORTD6); // PD6 como salida PWM
 2bc:	9a b1       	in	r25, 0x0a	; 10
 2be:	90 64       	ori	r25, 0x40	; 64
 2c0:	9a b9       	out	0x0a, r25	; 10
	
	// Modo Fast PWM
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 2c2:	94 b5       	in	r25, 0x24	; 36
 2c4:	93 60       	ori	r25, 0x03	; 3
 2c6:	94 bd       	out	0x24, r25	; 36
	
	// Salida no invertida
	if (invertido == invert) {
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <initPWMFastA+0x18>
		TCCR0A |= (1 << COM0A1) | (1 << COM0A0);
 2cc:	84 b5       	in	r24, 0x24	; 36
 2ce:	80 6c       	ori	r24, 0xC0	; 192
 2d0:	84 bd       	out	0x24, r24	; 36
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <initPWMFastA+0x1e>
		} else {
		TCCR0A |= (1 << COM0A1);
 2d4:	84 b5       	in	r24, 0x24	; 36
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	84 bd       	out	0x24, r24	; 36
	}
	
	// Configurar prescaler
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
 2da:	85 b5       	in	r24, 0x25	; 37
 2dc:	88 7f       	andi	r24, 0xF8	; 248
 2de:	85 bd       	out	0x25, r24	; 37
	switch(prescaler) {
 2e0:	60 34       	cpi	r22, 0x40	; 64
 2e2:	71 05       	cpc	r23, r1
 2e4:	c1 f0       	breq	.+48     	; 0x316 <initPWMFastA+0x5a>
 2e6:	38 f4       	brcc	.+14     	; 0x2f6 <initPWMFastA+0x3a>
 2e8:	61 30       	cpi	r22, 0x01	; 1
 2ea:	71 05       	cpc	r23, r1
 2ec:	61 f0       	breq	.+24     	; 0x306 <initPWMFastA+0x4a>
 2ee:	68 30       	cpi	r22, 0x08	; 8
 2f0:	71 05       	cpc	r23, r1
 2f2:	69 f0       	breq	.+26     	; 0x30e <initPWMFastA+0x52>
 2f4:	1c c0       	rjmp	.+56     	; 0x32e <initPWMFastA+0x72>
 2f6:	61 15       	cp	r22, r1
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	78 07       	cpc	r23, r24
 2fc:	81 f0       	breq	.+32     	; 0x31e <initPWMFastA+0x62>
 2fe:	61 15       	cp	r22, r1
 300:	74 40       	sbci	r23, 0x04	; 4
 302:	89 f0       	breq	.+34     	; 0x326 <initPWMFastA+0x6a>
 304:	14 c0       	rjmp	.+40     	; 0x32e <initPWMFastA+0x72>
		case 1:    TCCR0B |= (1 << CS00); break;
 306:	85 b5       	in	r24, 0x25	; 37
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	85 bd       	out	0x25, r24	; 37
 30c:	08 95       	ret
		case 8:    TCCR0B |= (1 << CS01); break;
 30e:	85 b5       	in	r24, 0x25	; 37
 310:	82 60       	ori	r24, 0x02	; 2
 312:	85 bd       	out	0x25, r24	; 37
 314:	08 95       	ret
		case 64:   TCCR0B |= (1 << CS01) | (1 << CS00); break;
 316:	85 b5       	in	r24, 0x25	; 37
 318:	83 60       	ori	r24, 0x03	; 3
 31a:	85 bd       	out	0x25, r24	; 37
 31c:	08 95       	ret
		case 256:  TCCR0B |= (1 << CS02); break;
 31e:	85 b5       	in	r24, 0x25	; 37
 320:	84 60       	ori	r24, 0x04	; 4
 322:	85 bd       	out	0x25, r24	; 37
 324:	08 95       	ret
		case 1024: TCCR0B |= (1 << CS02) | (1 << CS00); break;
 326:	85 b5       	in	r24, 0x25	; 37
 328:	85 60       	ori	r24, 0x05	; 5
 32a:	85 bd       	out	0x25, r24	; 37
 32c:	08 95       	ret
		default:   TCCR0B |= (1 << CS02) | (1 << CS00); break;
 32e:	85 b5       	in	r24, 0x25	; 37
 330:	85 60       	ori	r24, 0x05	; 5
 332:	85 bd       	out	0x25, r24	; 37
 334:	08 95       	ret

00000336 <updateDutyCycle>:
	}
}

void updateDutyCycle(uint8_t ticks) {
	OCR0A = ticks; // Ciclo de trabajo
 336:	87 bd       	out	0x27, r24	; 39
 338:	08 95       	ret

0000033a <initPWMFastB>:
 */ 
#include "PWM2.h"

void initPWMFastB(uint8_t invertido2, uint16_t prescaler2) {
	// Configurar PD3 (OC2B) como salida.
	DDRD |= (1 << DDD3);
 33a:	9a b1       	in	r25, 0x0a	; 10
 33c:	98 60       	ori	r25, 0x08	; 8
 33e:	9a b9       	out	0x0a, r25	; 10
	
	// Limpiar registros de Timer2
	TCCR2A = 0;
 340:	e0 eb       	ldi	r30, 0xB0	; 176
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	10 82       	st	Z, r1
	TCCR2B = 0;
 346:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	// Configurar modo Fast PWM para Timer2:
	// Se activa el modo Fast PWM con TOP
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
 34a:	90 81       	ld	r25, Z
 34c:	93 60       	ori	r25, 0x03	; 3
 34e:	90 83       	st	Z, r25
	
	// Configurar la salida en el canal OC2B (PD3)
	if (invertido2 == invert) {
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	21 f4       	brne	.+8      	; 0x35c <initPWMFastB+0x22>
		TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
 354:	80 81       	ld	r24, Z
 356:	80 63       	ori	r24, 0x30	; 48
 358:	80 83       	st	Z, r24
 35a:	08 c0       	rjmp	.+16     	; 0x36c <initPWMFastB+0x32>
		} else {
		TCCR2A |= (1 << COM2B1);
 35c:	e0 eb       	ldi	r30, 0xB0	; 176
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	80 62       	ori	r24, 0x20	; 32
 364:	80 83       	st	Z, r24
		TCCR2A &= ~(1 << COM2B0);
 366:	80 81       	ld	r24, Z
 368:	8f 7e       	andi	r24, 0xEF	; 239
 36a:	80 83       	st	Z, r24
	}
	
	// Limpiar bits de prescaler
	TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));
 36c:	e1 eb       	ldi	r30, 0xB1	; 177
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	88 7f       	andi	r24, 0xF8	; 248
 374:	80 83       	st	Z, r24
	// Configuración adecuada según el prescaler deseado:
	switch(prescaler2) {
 376:	60 34       	cpi	r22, 0x40	; 64
 378:	71 05       	cpc	r23, r1
 37a:	49 f1       	breq	.+82     	; 0x3ce <initPWMFastB+0x94>
 37c:	50 f4       	brcc	.+20     	; 0x392 <initPWMFastB+0x58>
 37e:	68 30       	cpi	r22, 0x08	; 8
 380:	71 05       	cpc	r23, r1
 382:	c9 f0       	breq	.+50     	; 0x3b6 <initPWMFastB+0x7c>
 384:	60 32       	cpi	r22, 0x20	; 32
 386:	71 05       	cpc	r23, r1
 388:	e1 f0       	breq	.+56     	; 0x3c2 <initPWMFastB+0x88>
 38a:	61 30       	cpi	r22, 0x01	; 1
 38c:	71 05       	cpc	r23, r1
 38e:	b9 f5       	brne	.+110    	; 0x3fe <initPWMFastB+0xc4>
 390:	0c c0       	rjmp	.+24     	; 0x3aa <initPWMFastB+0x70>
 392:	61 15       	cp	r22, r1
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	78 07       	cpc	r23, r24
 398:	31 f1       	breq	.+76     	; 0x3e6 <initPWMFastB+0xac>
 39a:	61 15       	cp	r22, r1
 39c:	84 e0       	ldi	r24, 0x04	; 4
 39e:	78 07       	cpc	r23, r24
 3a0:	41 f1       	breq	.+80     	; 0x3f2 <initPWMFastB+0xb8>
 3a2:	60 38       	cpi	r22, 0x80	; 128
 3a4:	71 05       	cpc	r23, r1
 3a6:	59 f5       	brne	.+86     	; 0x3fe <initPWMFastB+0xc4>
 3a8:	18 c0       	rjmp	.+48     	; 0x3da <initPWMFastB+0xa0>
		case 1: TCCR2B |= (1 << CS20);        // 001 = clock/1
 3aa:	e1 eb       	ldi	r30, 0xB1	; 177
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	80 83       	st	Z, r24
		break;
 3b4:	08 95       	ret
		case 8: TCCR2B |= (1 << CS21);        // 010 = clock/8
 3b6:	e1 eb       	ldi	r30, 0xB1	; 177
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	82 60       	ori	r24, 0x02	; 2
 3be:	80 83       	st	Z, r24
		break;
 3c0:	08 95       	ret
		case 32: TCCR2B |= (1 << CS21) | (1 << CS20); // 011 = clock/32
 3c2:	e1 eb       	ldi	r30, 0xB1	; 177
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	83 60       	ori	r24, 0x03	; 3
 3ca:	80 83       	st	Z, r24
		break;
 3cc:	08 95       	ret
		case 64: TCCR2B |= (1 << CS22);        // 100 = clock/64
 3ce:	e1 eb       	ldi	r30, 0xB1	; 177
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	84 60       	ori	r24, 0x04	; 4
 3d6:	80 83       	st	Z, r24
		break;
 3d8:	08 95       	ret
		case 128: TCCR2B |= (1 << CS22) | (1 << CS20); // 101 = clock/128
 3da:	e1 eb       	ldi	r30, 0xB1	; 177
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	85 60       	ori	r24, 0x05	; 5
 3e2:	80 83       	st	Z, r24
		break;
 3e4:	08 95       	ret
		case 256: TCCR2B |= (1 << CS22) | (1 << CS21); // 110 = clock/256
 3e6:	e1 eb       	ldi	r30, 0xB1	; 177
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	86 60       	ori	r24, 0x06	; 6
 3ee:	80 83       	st	Z, r24
		break;
 3f0:	08 95       	ret
		case 1024: TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // 111 = clock/1024
 3f2:	e1 eb       	ldi	r30, 0xB1	; 177
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	87 60       	ori	r24, 0x07	; 7
 3fa:	80 83       	st	Z, r24
		break;
 3fc:	08 95       	ret
		default: TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // Predeterminado: 1024
 3fe:	e1 eb       	ldi	r30, 0xB1	; 177
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	87 60       	ori	r24, 0x07	; 7
 406:	80 83       	st	Z, r24
 408:	08 95       	ret

0000040a <updateDutyCycle2>:
	}
}

void updateDutyCycle2(uint8_t ticks2) {
	// Actualiza el OCR2B, OC2B = PD3.
	OCR2B = ticks2;
 40a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 40e:	08 95       	ret

00000410 <initPWMFastB_T1>:
 */ 
#include "PWM3.h"

void initPWMFastB_T1(uint8_t inv, uint16_t presc) {
	// 1) Pin PB2 (OC1B) como salida
	DDRB |= (1 << DDB2);
 410:	94 b1       	in	r25, 0x04	; 4
 412:	94 60       	ori	r25, 0x04	; 4
 414:	94 b9       	out	0x04, r25	; 4

	// 2) Limpiar registros antes de configurar todo
	TCCR1A = 0;
 416:	a0 e8       	ldi	r26, 0x80	; 128
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	1c 92       	st	X, r1
	TCCR1B = 0;
 41c:	e1 e8       	ldi	r30, 0x81	; 129
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	10 82       	st	Z, r1

	// 3) Modo Fast PWM con ICR1 como TOP (modo 14)
	TCCR1A |= (1 << WGM11);
 422:	9c 91       	ld	r25, X
 424:	92 60       	ori	r25, 0x02	; 2
 426:	9c 93       	st	X, r25
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 428:	90 81       	ld	r25, Z
 42a:	98 61       	ori	r25, 0x18	; 24
 42c:	90 83       	st	Z, r25

	// 4) Configurar salida no invertida o invertida en OC1B
	if (inv == invert) {
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	31 f4       	brne	.+12     	; 0x43e <initPWMFastB_T1+0x2e>
		TCCR1A |= (1 << COM1B1) | (1 << COM1B0);
 432:	e0 e8       	ldi	r30, 0x80	; 128
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	80 63       	ori	r24, 0x30	; 48
 43a:	80 83       	st	Z, r24
 43c:	08 c0       	rjmp	.+16     	; 0x44e <initPWMFastB_T1+0x3e>
		} else {
		TCCR1A |= (1 << COM1B1);
 43e:	e0 e8       	ldi	r30, 0x80	; 128
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	80 62       	ori	r24, 0x20	; 32
 446:	80 83       	st	Z, r24
		TCCR1A &= ~(1 << COM1B0);
 448:	80 81       	ld	r24, Z
 44a:	8f 7e       	andi	r24, 0xEF	; 239
 44c:	80 83       	st	Z, r24
	}

	// 5) Prescaler (ejemplo presc=8 para 50Hz)
	switch (presc) {
 44e:	60 34       	cpi	r22, 0x40	; 64
 450:	71 05       	cpc	r23, r1
 452:	e1 f0       	breq	.+56     	; 0x48c <initPWMFastB_T1+0x7c>
 454:	38 f4       	brcc	.+14     	; 0x464 <initPWMFastB_T1+0x54>
 456:	61 30       	cpi	r22, 0x01	; 1
 458:	71 05       	cpc	r23, r1
 45a:	61 f0       	breq	.+24     	; 0x474 <initPWMFastB_T1+0x64>
 45c:	68 30       	cpi	r22, 0x08	; 8
 45e:	71 05       	cpc	r23, r1
 460:	79 f0       	breq	.+30     	; 0x480 <initPWMFastB_T1+0x70>
 462:	26 c0       	rjmp	.+76     	; 0x4b0 <initPWMFastB_T1+0xa0>
 464:	61 15       	cp	r22, r1
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	78 07       	cpc	r23, r24
 46a:	b1 f0       	breq	.+44     	; 0x498 <initPWMFastB_T1+0x88>
 46c:	61 15       	cp	r22, r1
 46e:	74 40       	sbci	r23, 0x04	; 4
 470:	c9 f0       	breq	.+50     	; 0x4a4 <initPWMFastB_T1+0x94>
 472:	1e c0       	rjmp	.+60     	; 0x4b0 <initPWMFastB_T1+0xa0>
		case 1:    TCCR1B |= (1 << CS10); break;
 474:	e1 e8       	ldi	r30, 0x81	; 129
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	80 83       	st	Z, r24
 47e:	1d c0       	rjmp	.+58     	; 0x4ba <initPWMFastB_T1+0xaa>
		case 8:    TCCR1B |= (1 << CS11); break;
 480:	e1 e8       	ldi	r30, 0x81	; 129
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	82 60       	ori	r24, 0x02	; 2
 488:	80 83       	st	Z, r24
 48a:	17 c0       	rjmp	.+46     	; 0x4ba <initPWMFastB_T1+0xaa>
		case 64:   TCCR1B |= (1 << CS11) | (1 << CS10); break;
 48c:	e1 e8       	ldi	r30, 0x81	; 129
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	83 60       	ori	r24, 0x03	; 3
 494:	80 83       	st	Z, r24
 496:	11 c0       	rjmp	.+34     	; 0x4ba <initPWMFastB_T1+0xaa>
		case 256:  TCCR1B |= (1 << CS12); break;
 498:	e1 e8       	ldi	r30, 0x81	; 129
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	80 83       	st	Z, r24
 4a2:	0b c0       	rjmp	.+22     	; 0x4ba <initPWMFastB_T1+0xaa>
		case 1024: TCCR1B |= (1 << CS12) | (1 << CS10); break;
 4a4:	e1 e8       	ldi	r30, 0x81	; 129
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	85 60       	ori	r24, 0x05	; 5
 4ac:	80 83       	st	Z, r24
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <initPWMFastB_T1+0xaa>
		default:   TCCR1B |= (1 << CS11); break; // default 8
 4b0:	e1 e8       	ldi	r30, 0x81	; 129
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	82 60       	ori	r24, 0x02	; 2
 4b8:	80 83       	st	Z, r24
	}

	// 6) TOP para 20ms (50Hz): ICR1 = F_CPU/prescaler/50Hz - 1 = 16MHz/8/50 -1 = 39999
	ICR1 = 39999;
 4ba:	8f e3       	ldi	r24, 0x3F	; 63
 4bc:	9c e9       	ldi	r25, 0x9C	; 156
 4be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 4c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 4c6:	08 95       	ret

000004c8 <updateDutyCycle3>:
}

void updateDutyCycle3(uint16_t ticks) {
	OCR1B = ticks;
 4c8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 4cc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 4d0:	08 95       	ret

000004d2 <initPWMFastA_T1>:

#include "PWM4.h"

void initPWMFastA_T1(uint8_t inv, uint16_t presc) {
	// 1) Pin PB1 (OC1A) como salida
	DDRB |= (1 << DDB1);
 4d2:	94 b1       	in	r25, 0x04	; 4
 4d4:	92 60       	ori	r25, 0x02	; 2
 4d6:	94 b9       	out	0x04, r25	; 4

	// 2) *NO* limpiamos TCCR1A/B aquí, ya lo hizo PWM3.

	// 3) Aseguramos el bit WGM11 para Fast PWM (modo 14)
	TCCR1A |= (1 << WGM11);
 4d8:	e0 e8       	ldi	r30, 0x80	; 128
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	90 81       	ld	r25, Z
 4de:	92 60       	ori	r25, 0x02	; 2
 4e0:	90 83       	st	Z, r25

	// 4) Configurar salida no invertida o invertida en OC1A
	if (inv == invert) {
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	21 f4       	brne	.+8      	; 0x4ee <initPWMFastA_T1+0x1c>
		TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
 4e6:	80 81       	ld	r24, Z
 4e8:	80 6c       	ori	r24, 0xC0	; 192
 4ea:	80 83       	st	Z, r24
 4ec:	08 c0       	rjmp	.+16     	; 0x4fe <initPWMFastA_T1+0x2c>
		} else {
		TCCR1A |= (1 << COM1A1);
 4ee:	e0 e8       	ldi	r30, 0x80	; 128
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	80 68       	ori	r24, 0x80	; 128
 4f6:	80 83       	st	Z, r24
		TCCR1A &= ~(1 << COM1A0);
 4f8:	80 81       	ld	r24, Z
 4fa:	8f 7b       	andi	r24, 0xBF	; 191
 4fc:	80 83       	st	Z, r24
	}

	// 5) Prescaler (ejemplo presc=8 para 50Hz)
	if (presc == 1)    TCCR1B |= (1 << CS10);
 4fe:	61 30       	cpi	r22, 0x01	; 1
 500:	71 05       	cpc	r23, r1
 502:	31 f4       	brne	.+12     	; 0x510 <initPWMFastA_T1+0x3e>
 504:	e1 e8       	ldi	r30, 0x81	; 129
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	81 60       	ori	r24, 0x01	; 1
 50c:	80 83       	st	Z, r24
 50e:	08 95       	ret
	else if (presc == 8)  TCCR1B |= (1 << CS11);
 510:	68 30       	cpi	r22, 0x08	; 8
 512:	71 05       	cpc	r23, r1
 514:	31 f4       	brne	.+12     	; 0x522 <initPWMFastA_T1+0x50>
 516:	e1 e8       	ldi	r30, 0x81	; 129
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	82 60       	ori	r24, 0x02	; 2
 51e:	80 83       	st	Z, r24
 520:	08 95       	ret
	else if (presc == 64) TCCR1B |= (1 << CS11) | (1 << CS10);
 522:	60 34       	cpi	r22, 0x40	; 64
 524:	71 05       	cpc	r23, r1
 526:	31 f4       	brne	.+12     	; 0x534 <initPWMFastA_T1+0x62>
 528:	e1 e8       	ldi	r30, 0x81	; 129
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	83 60       	ori	r24, 0x03	; 3
 530:	80 83       	st	Z, r24
 532:	08 95       	ret
	else if (presc == 256)TCCR1B |= (1 << CS12);
 534:	61 15       	cp	r22, r1
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	78 07       	cpc	r23, r24
 53a:	31 f4       	brne	.+12     	; 0x548 <initPWMFastA_T1+0x76>
 53c:	e1 e8       	ldi	r30, 0x81	; 129
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	84 60       	ori	r24, 0x04	; 4
 544:	80 83       	st	Z, r24
 546:	08 95       	ret
	else if (presc == 1024)TCCR1B |= (1 << CS12) | (1 << CS10);
 548:	61 15       	cp	r22, r1
 54a:	74 40       	sbci	r23, 0x04	; 4
 54c:	31 f4       	brne	.+12     	; 0x55a <initPWMFastA_T1+0x88>
 54e:	e1 e8       	ldi	r30, 0x81	; 129
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	85 60       	ori	r24, 0x05	; 5
 556:	80 83       	st	Z, r24
 558:	08 95       	ret
	else /*default*/      TCCR1B |= (1 << CS11);
 55a:	e1 e8       	ldi	r30, 0x81	; 129
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	82 60       	ori	r24, 0x02	; 2
 562:	80 83       	st	Z, r24
 564:	08 95       	ret

00000566 <updateDutyCycle4>:

	// 6) TOP (ICR1) ya configurado por PWM3
}

void updateDutyCycle4(uint16_t ticks) {
	OCR1A = ticks;
 566:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 56a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 56e:	08 95       	ret

00000570 <__udivmodsi4>:
 570:	a1 e2       	ldi	r26, 0x21	; 33
 572:	1a 2e       	mov	r1, r26
 574:	aa 1b       	sub	r26, r26
 576:	bb 1b       	sub	r27, r27
 578:	fd 01       	movw	r30, r26
 57a:	0d c0       	rjmp	.+26     	; 0x596 <__udivmodsi4_ep>

0000057c <__udivmodsi4_loop>:
 57c:	aa 1f       	adc	r26, r26
 57e:	bb 1f       	adc	r27, r27
 580:	ee 1f       	adc	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	a2 17       	cp	r26, r18
 586:	b3 07       	cpc	r27, r19
 588:	e4 07       	cpc	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	20 f0       	brcs	.+8      	; 0x596 <__udivmodsi4_ep>
 58e:	a2 1b       	sub	r26, r18
 590:	b3 0b       	sbc	r27, r19
 592:	e4 0b       	sbc	r30, r20
 594:	f5 0b       	sbc	r31, r21

00000596 <__udivmodsi4_ep>:
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a 94       	dec	r1
 5a0:	69 f7       	brne	.-38     	; 0x57c <__udivmodsi4_loop>
 5a2:	60 95       	com	r22
 5a4:	70 95       	com	r23
 5a6:	80 95       	com	r24
 5a8:	90 95       	com	r25
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
 5ae:	bd 01       	movw	r22, r26
 5b0:	cf 01       	movw	r24, r30
 5b2:	08 95       	ret

000005b4 <__umulhisi3>:
 5b4:	a2 9f       	mul	r26, r18
 5b6:	b0 01       	movw	r22, r0
 5b8:	b3 9f       	mul	r27, r19
 5ba:	c0 01       	movw	r24, r0
 5bc:	a3 9f       	mul	r26, r19
 5be:	70 0d       	add	r23, r0
 5c0:	81 1d       	adc	r24, r1
 5c2:	11 24       	eor	r1, r1
 5c4:	91 1d       	adc	r25, r1
 5c6:	b2 9f       	mul	r27, r18
 5c8:	70 0d       	add	r23, r0
 5ca:	81 1d       	adc	r24, r1
 5cc:	11 24       	eor	r1, r1
 5ce:	91 1d       	adc	r25, r1
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
